
I2C_arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000934  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000765  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042b  00000000  00000000  000012fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001728  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000425  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c0  00000000  00000000  00001be5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001ca5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 76 00 	call	0xec	; 0xec <main>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_Init>:
{
	/* F = CPUclk/(16+(2*TWBR*Preescalador))
	 * F = 16 MHz /(16+2*2*1)
	 * F = 400 kHz
	 */
	TWSR = 0x00;		//--- Preescalador (1)
  90:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x0C;		//--- Divisor (2)
  94:	8c e0       	ldi	r24, 0x0C	; 12
  96:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	PRR &=~ (1<<PRTWI);	//--- Enciende el periferico
  9a:	e4 e6       	ldi	r30, 0x64	; 100
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	8f 77       	andi	r24, 0x7F	; 127
  a2:	80 83       	st	Z, r24
  a4:	08 95       	ret

000000a6 <I2C_StartCondition>:
}

/* Envio del estado START */
void I2C_StartCondition()
{
	TWCR = ((1<<TWINT)|(1<<TWSTA)|(1<<TWEN));
  a6:	84 ea       	ldi	r24, 0xA4	; 164
  a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
  ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b0:	88 23       	and	r24, r24
  b2:	e4 f7       	brge	.-8      	; 0xac <I2C_StartCondition+0x6>
}
  b4:	08 95       	ret

000000b6 <I2C_StopCondition>:

/* Envio del estado STOP */
void I2C_StopCondition()
{
	TWCR = ((1<<TWINT)|(1<<TWSTO)|(1<<TWEN));
  b6:	84 e9       	ldi	r24, 0x94	; 148
  b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  bc:	08 95       	ret

000000be <I2C_SendAddress>:

/* Envio del address con configuracion R/W */
void I2C_SendAddress(uint8_t addr, uint8_t action)
{
	// uint8_t cmp = 0;
	addr = (addr<<1);
  be:	88 0f       	add	r24, r24
	
	if(action == I2C_W)
  c0:	61 11       	cpse	r22, r1
	{
		addr &=~ 1;
		//cmp = I2C_WT_SLA_ACK;
	} else 
	{
		addr |= 1;
  c2:	81 60       	ori	r24, 0x01	; 1
		//cmp = I2C_RD_SLA_ACK;
	}
	
	TWDR = addr;
  c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = ((1<<TWINT)|(1<<TWEN));
  c8:	84 e8       	ldi	r24, 0x84	; 132
  ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	while(!(TWCR & (1<<TWINT)));
  ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  d2:	88 23       	and	r24, r24
  d4:	e4 f7       	brge	.-8      	; 0xce <I2C_SendAddress+0x10>
}
  d6:	08 95       	ret

000000d8 <I2C_Write>:

/* Escritura */
void I2C_Write(uint8_t data)
{
	TWDR = data;
  d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = ((1<<TWINT)|(1<<TWEN));
  dc:	84 e8       	ldi	r24, 0x84	; 132
  de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
  e2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  e6:	88 23       	and	r24, r24
  e8:	e4 f7       	brge	.-8      	; 0xe2 <I2C_Write+0xa>
}
  ea:	08 95       	ret

000000ec <main>:

uint8_t I2C_data_H = 0, I2C_data_L = 0;

int main(void)
{
	cli();
  ec:	f8 94       	cli
	I2C_Init();
  ee:	0e 94 48 00 	call	0x90	; 0x90 <I2C_Init>
	sei();
  f2:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	8f e3       	ldi	r24, 0x3F	; 63
  f6:	9c e9       	ldi	r25, 0x9C	; 156
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0xc>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x12>
  fe:	00 00       	nop
	
	_delay_ms(10);
	
	DDRD = 0xFF;
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	8a b9       	out	0x0a, r24	; 10

	while(1) //Bucle infinito
	{
		I2C_StartCondition();
 104:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_StartCondition>
		I2C_SendAddress(0x4C, 0x00);
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	8c e4       	ldi	r24, 0x4C	; 76
 10c:	0e 94 5f 00 	call	0xbe	; 0xbe <I2C_SendAddress>
		I2C_StartCondition();
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_StartCondition>
		I2C_Write(0xAA);
 114:	8a ea       	ldi	r24, 0xAA	; 170
 116:	0e 94 6c 00 	call	0xd8	; 0xd8 <I2C_Write>
		I2C_StopCondition();
 11a:	0e 94 5b 00 	call	0xb6	; 0xb6 <I2C_StopCondition>
 11e:	9f ef       	ldi	r25, 0xFF	; 255
 120:	29 e6       	ldi	r18, 0x69	; 105
 122:	88 e1       	ldi	r24, 0x18	; 24
 124:	91 50       	subi	r25, 0x01	; 1
 126:	20 40       	sbci	r18, 0x00	; 0
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x38>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x42>
 12e:	00 00       	nop
 130:	e9 cf       	rjmp	.-46     	; 0x104 <main+0x18>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
