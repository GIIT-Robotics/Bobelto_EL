
SPI_M.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000084e  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000711  00000000  00000000  00000aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000369  00000000  00000000  000011bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001528  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ea  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000074  00000000  00000000  00001986  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000019fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  88:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <SPI_init>:
{
	/* Esperar a la recepción del dato */
	while(!(SPSR & (1<<SPIF)));
	/* Retorna el dato recibido */
	return SPDR;
}
  90:	84 b1       	in	r24, 0x04	; 4
  92:	88 62       	ori	r24, 0x28	; 40
  94:	84 b9       	out	0x04, r24	; 4
  96:	84 b1       	in	r24, 0x04	; 4
  98:	8f 7e       	andi	r24, 0xEF	; 239
  9a:	84 b9       	out	0x04, r24	; 4
  9c:	84 b1       	in	r24, 0x04	; 4
  9e:	84 60       	ori	r24, 0x04	; 4
  a0:	84 b9       	out	0x04, r24	; 4
  a2:	85 b1       	in	r24, 0x05	; 5
  a4:	84 60       	ori	r24, 0x04	; 4
  a6:	85 b9       	out	0x05, r24	; 5
  a8:	8c b5       	in	r24, 0x2c	; 44
  aa:	8f 7d       	andi	r24, 0xDF	; 223
  ac:	8c bd       	out	0x2c, r24	; 44
  ae:	8c b5       	in	r24, 0x2c	; 44
  b0:	87 7f       	andi	r24, 0xF7	; 247
  b2:	8c bd       	out	0x2c, r24	; 44
  b4:	8c b5       	in	r24, 0x2c	; 44
  b6:	8b 7f       	andi	r24, 0xFB	; 251
  b8:	8c bd       	out	0x2c, r24	; 44
  ba:	8c b5       	in	r24, 0x2c	; 44
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	8c bd       	out	0x2c, r24	; 44
  c0:	8c b5       	in	r24, 0x2c	; 44
  c2:	8d 7f       	andi	r24, 0xFD	; 253
  c4:	8c bd       	out	0x2c, r24	; 44
  c6:	8d b5       	in	r24, 0x2d	; 45
  c8:	8e 7f       	andi	r24, 0xFE	; 254
  ca:	8d bd       	out	0x2d, r24	; 45
  cc:	8c b5       	in	r24, 0x2c	; 44
  ce:	80 61       	ori	r24, 0x10	; 16
  d0:	8c bd       	out	0x2c, r24	; 44
  d2:	8c b5       	in	r24, 0x2c	; 44
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	8c bd       	out	0x2c, r24	; 44
  d8:	08 95       	ret

000000da <SPI_slaveON>:
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	19 f0       	breq	.+6      	; 0xe4 <SPI_slaveON+0xa>
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	29 f0       	breq	.+10     	; 0xec <SPI_slaveON+0x12>
  e2:	08 95       	ret
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	8b 7f       	andi	r24, 0xFB	; 251
  e8:	85 b9       	out	0x05, r24	; 5
  ea:	08 95       	ret
  ec:	85 b1       	in	r24, 0x05	; 5
  ee:	8b 7f       	andi	r24, 0xFB	; 251
  f0:	85 b9       	out	0x05, r24	; 5
  f2:	08 95       	ret

000000f4 <SPI_slaveOFF>:
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	19 f0       	breq	.+6      	; 0xfe <SPI_slaveOFF+0xa>
  f8:	82 30       	cpi	r24, 0x02	; 2
  fa:	29 f0       	breq	.+10     	; 0x106 <SPI_slaveOFF+0x12>
  fc:	08 95       	ret
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	8b 7f       	andi	r24, 0xFB	; 251
 102:	85 b9       	out	0x05, r24	; 5
 104:	08 95       	ret
 106:	85 b1       	in	r24, 0x05	; 5
 108:	8b 7f       	andi	r24, 0xFB	; 251
 10a:	85 b9       	out	0x05, r24	; 5
 10c:	08 95       	ret

0000010e <SPI_tx>:
 10e:	8e bd       	out	0x2e, r24	; 46
 110:	0d b4       	in	r0, 0x2d	; 45
 112:	07 fe       	sbrs	r0, 7
 114:	fd cf       	rjmp	.-6      	; 0x110 <SPI_tx+0x2>
 116:	08 95       	ret

00000118 <main>:

int main(void)
{
	SPI_init();
 118:	0e 94 48 00 	call	0x90	; 0x90 <SPI_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	8f e3       	ldi	r24, 0x3F	; 63
 11e:	9c e9       	ldi	r25, 0x9C	; 156
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x8>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0xe>
 126:	00 00       	nop

	_delay_ms(10);
	
    while (1) 
    {
		SPI_slaveON(1);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_slaveON>
		SPI_tx(0x12);
 12e:	82 e1       	ldi	r24, 0x12	; 18
 130:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_tx>
		SPI_slaveOFF(1);
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 7a 00 	call	0xf4	; 0xf4 <SPI_slaveOFF>
 13a:	9f ef       	ldi	r25, 0xFF	; 255
 13c:	23 ed       	ldi	r18, 0xD3	; 211
 13e:	80 e3       	ldi	r24, 0x30	; 48
 140:	91 50       	subi	r25, 0x01	; 1
 142:	20 40       	sbci	r18, 0x00	; 0
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x28>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x32>
 14a:	00 00       	nop
 14c:	ed cf       	rjmp	.-38     	; 0x128 <main+0x10>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
