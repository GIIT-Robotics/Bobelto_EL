
SPI_M.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000c68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bf4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000c68  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c55  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f5  00000000  00000000  000019c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000654  00000000  00000000  000022ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00002910  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ac  00000000  00000000  00002ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000046a  00000000  00000000  00002f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000033ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_18>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  68:	07 63       	ori	r16, 0x37	; 55
  6a:	42 36       	cpi	r20, 0x62	; 98
  6c:	b7 9b       	sbis	0x16, 7	; 22
  6e:	d8 a7       	std	Y+40, r29	; 0x28
  70:	1a 39       	cpi	r17, 0x9A	; 154
  72:	68 56       	subi	r22, 0x68	; 104
  74:	18 ae       	std	Y+56, r1	; 0x38
  76:	ba ab       	std	Y+50, r27	; 0x32
  78:	55 8c       	ldd	r5, Z+29	; 0x1d
  7a:	1d 3c       	cpi	r17, 0xCD	; 205
  7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
  7e:	57 63       	ori	r21, 0x37	; 55
  80:	bd 6d       	ori	r27, 0xDD	; 221
  82:	ed fd       	.word	0xfded	; ????
  84:	75 3e       	cpi	r23, 0xE5	; 229
  86:	f6 17       	cp	r31, r22
  88:	72 31       	cpi	r23, 0x12	; 18
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	08 00       	.word	0x0008	; ????
  92:	00 00       	nop
  94:	be 92       	st	-X, r11
  96:	24 49       	sbci	r18, 0x94	; 148
  98:	12 3e       	cpi	r17, 0xE2	; 226
  9a:	ab aa       	std	Y+51, r10	; 0x33
  9c:	aa 2a       	or	r10, r26
  9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
  a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
  a2:	4c 3e       	cpi	r20, 0xEC	; 236
  a4:	00 00       	nop
  a6:	00 80       	ld	r0, Z
  a8:	be ab       	std	Y+54, r27	; 0x36
  aa:	aa aa       	std	Y+50, r10	; 0x32
  ac:	aa 3e       	cpi	r26, 0xEA	; 234
  ae:	00 00       	nop
  b0:	00 00       	nop
  b2:	bf 00       	.word	0x00bf	; ????
  b4:	00 00       	nop
  b6:	80 3f       	cpi	r24, 0xF0	; 240
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	00 08       	sbc	r0, r0
  be:	41 78       	andi	r20, 0x81	; 129
  c0:	d3 bb       	out	0x13, r29	; 19
  c2:	43 87       	std	Z+11, r20	; 0x0b
  c4:	d1 13       	cpse	r29, r17
  c6:	3d 19       	sub	r19, r13
  c8:	0e 3c       	cpi	r16, 0xCE	; 206
  ca:	c3 bd       	out	0x23, r28	; 35
  cc:	42 82       	std	Z+2, r4	; 0x02
  ce:	ad 2b       	or	r26, r29
  d0:	3e 68       	ori	r19, 0x8E	; 142
  d2:	ec 82       	std	Y+4, r14	; 0x04
  d4:	76 be       	out	0x36, r7	; 54
  d6:	d9 8f       	std	Y+25, r29	; 0x19
  d8:	e1 a9       	ldd	r30, Z+49	; 0x31
  da:	3e 4c       	sbci	r19, 0xCE	; 206
  dc:	80 ef       	ldi	r24, 0xF0	; 240
  de:	ff be       	out	0x3f, r15	; 63
  e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <__fp_powser+0x1e>
  e2:	ff 7f       	andi	r31, 0xFF	; 255
  e4:	3f 00       	.word	0x003f	; ????
  e6:	00 00       	nop
	...

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d8 e0       	ldi	r29, 0x08	; 8
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_clear_bss>:
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a1 30       	cpi	r26, 0x01	; 1
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
 10a:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <SPI_init>:
{
	/* Esperar a la recepción del dato */
	while(!(SPSR & (1<<SPIF)));
	/* Retorna el dato recibido */
	return SPDR;
}
 112:	84 b1       	in	r24, 0x04	; 4
 114:	8e 62       	ori	r24, 0x2E	; 46
 116:	84 b9       	out	0x04, r24	; 4
 118:	84 b1       	in	r24, 0x04	; 4
 11a:	8f 7e       	andi	r24, 0xEF	; 239
 11c:	84 b9       	out	0x04, r24	; 4
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	86 60       	ori	r24, 0x06	; 6
 122:	85 b9       	out	0x05, r24	; 5
 124:	8c b5       	in	r24, 0x2c	; 44
 126:	8f 7d       	andi	r24, 0xDF	; 223
 128:	8c bd       	out	0x2c, r24	; 44
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	8c bd       	out	0x2c, r24	; 44
 12e:	1d bc       	out	0x2d, r1	; 45
 130:	8c b5       	in	r24, 0x2c	; 44
 132:	80 61       	ori	r24, 0x10	; 16
 134:	8c bd       	out	0x2c, r24	; 44
 136:	8c b5       	in	r24, 0x2c	; 44
 138:	80 64       	ori	r24, 0x40	; 64
 13a:	8c bd       	out	0x2c, r24	; 44
 13c:	08 95       	ret

0000013e <SPI_slaveON>:
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	19 f0       	breq	.+6      	; 0x148 <SPI_slaveON+0xa>
 142:	82 30       	cpi	r24, 0x02	; 2
 144:	29 f0       	breq	.+10     	; 0x150 <SPI_slaveON+0x12>
 146:	08 95       	ret
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	8d 7f       	andi	r24, 0xFD	; 253
 14c:	85 b9       	out	0x05, r24	; 5
 14e:	08 95       	ret
 150:	85 b1       	in	r24, 0x05	; 5
 152:	8b 7f       	andi	r24, 0xFB	; 251
 154:	85 b9       	out	0x05, r24	; 5
 156:	08 95       	ret

00000158 <SPI_slaveOFF>:
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	19 f0       	breq	.+6      	; 0x162 <SPI_slaveOFF+0xa>
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	29 f0       	breq	.+10     	; 0x16a <SPI_slaveOFF+0x12>
 160:	08 95       	ret
 162:	85 b1       	in	r24, 0x05	; 5
 164:	82 60       	ori	r24, 0x02	; 2
 166:	85 b9       	out	0x05, r24	; 5
 168:	08 95       	ret
 16a:	85 b1       	in	r24, 0x05	; 5
 16c:	84 60       	ori	r24, 0x04	; 4
 16e:	85 b9       	out	0x05, r24	; 5
 170:	08 95       	ret

00000172 <SPI_trans>:

uint8_t SPI_trans(uint8_t data)
{
	SPDR = data;
 172:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 174:	0d b4       	in	r0, 0x2d	; 45
 176:	07 fe       	sbrs	r0, 7
 178:	fd cf       	rjmp	.-6      	; 0x174 <SPI_trans+0x2>
	return SPDR;
 17a:	8e b5       	in	r24, 0x2e	; 46
}
 17c:	08 95       	ret

0000017e <__vector_18>:

ISR(USART_RX_vect)
{
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	2f 93       	push	r18
 18a:	3f 93       	push	r19
 18c:	4f 93       	push	r20
 18e:	5f 93       	push	r21
 190:	6f 93       	push	r22
 192:	7f 93       	push	r23
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
 198:	af 93       	push	r26
 19a:	bf 93       	push	r27
 19c:	ef 93       	push	r30
 19e:	ff 93       	push	r31
	UART_Rx = UART_read();
 1a0:	0e 94 48 01 	call	0x290	; 0x290 <UART_read>
 1a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 1a8:	ff 91       	pop	r31
 1aa:	ef 91       	pop	r30
 1ac:	bf 91       	pop	r27
 1ae:	af 91       	pop	r26
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	7f 91       	pop	r23
 1b6:	6f 91       	pop	r22
 1b8:	5f 91       	pop	r21
 1ba:	4f 91       	pop	r20
 1bc:	3f 91       	pop	r19
 1be:	2f 91       	pop	r18
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <main>:

int main(void)
{
	uint8_t temp[4] = {0,0,0,0};
 1ca:	c0 e0       	ldi	r28, 0x00	; 0
	
	cli();
 1cc:	f8 94       	cli
	SPI_init();
 1ce:	0e 94 89 00 	call	0x112	; 0x112 <SPI_init>
	UART_init();
 1d2:	0e 94 33 01 	call	0x266	; 0x266 <UART_init>
	sei();
 1d6:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	8f e3       	ldi	r24, 0x3F	; 63
 1da:	9c e9       	ldi	r25, 0x9C	; 156
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <main+0x12>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <main+0x18>
 1e2:	00 00       	nop
	
    while (1) 
    {
		float F = 0.0;
		
		switch(UART_Rx)
 1e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e8:	80 33       	cpi	r24, 0x30	; 48
 1ea:	19 f0       	breq	.+6      	; 0x1f2 <main+0x28>
 1ec:	81 33       	cpi	r24, 0x31	; 49
 1ee:	89 f0       	breq	.+34     	; 0x212 <main+0x48>
 1f0:	33 c0       	rjmp	.+102    	; 0x258 <main+0x8e>
		{
			case '0':
				SPI_slaveON(1);
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_slaveON>
				temp[0] = SPI_trans(0x01);
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	0e 94 b9 00 	call	0x172	; 0x172 <SPI_trans>
 1fe:	c8 2f       	mov	r28, r24
				SPI_slaveOFF(1);
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 ac 00 	call	0x158	; 0x158 <SPI_slaveOFF>
				
				UART_write(temp[0]);
 206:	8c 2f       	mov	r24, r28
 208:	0e 94 51 01 	call	0x2a2	; 0x2a2 <UART_write>
				
				UART_Rx = 0x00;
 20c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				
				break;
 210:	23 c0       	rjmp	.+70     	; 0x258 <main+0x8e>
			
			case '1':
				SPI_slaveON(1);
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_slaveON>
				temp[1] = SPI_trans(0x02);
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	0e 94 b9 00 	call	0x172	; 0x172 <SPI_trans>
 21e:	d8 2f       	mov	r29, r24
				SPI_slaveOFF(1);
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	0e 94 ac 00 	call	0x158	; 0x158 <SPI_slaveOFF>
				
				F = (uint8_t)temp[0] << 8 | (uint8_t)temp[1] << 0;
 226:	6c 2f       	mov	r22, r28
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	76 2f       	mov	r23, r22
 22c:	66 27       	eor	r22, r22
 22e:	6d 2b       	or	r22, r29
 230:	07 2e       	mov	r0, r23
 232:	00 0c       	add	r0, r0
 234:	88 0b       	sbc	r24, r24
 236:	99 0b       	sbc	r25, r25
 238:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__floatsisf>
 23c:	6b 01       	movw	r12, r22
 23e:	7c 01       	movw	r14, r24
				
				UART_write(temp[1]);
 240:	8d 2f       	mov	r24, r29
 242:	0e 94 51 01 	call	0x2a2	; 0x2a2 <UART_write>
				
				UART_write_data(F);
 246:	c7 01       	movw	r24, r14
 248:	b6 01       	movw	r22, r12
 24a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <UART_write_data>
				UART_write('\n');
 24e:	8a e0       	ldi	r24, 0x0A	; 10
 250:	0e 94 51 01 	call	0x2a2	; 0x2a2 <UART_write>
				
				UART_Rx = 0x00;
 254:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 258:	8f e3       	ldi	r24, 0x3F	; 63
 25a:	9c e9       	ldi	r25, 0x9C	; 156
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <main+0x92>
 260:	00 c0       	rjmp	.+0      	; 0x262 <main+0x98>
 262:	00 00       	nop
 264:	bf cf       	rjmp	.-130    	; 0x1e4 <main+0x1a>

00000266 <UART_init>:
	while(*cadena !=0x00){				//mientras el último valor de la cadena sea diferente a el caracter nulo
		UART_write(*cadena);			//transmite los caracteres de cadena
		cadena++;						//incrementa la ubicación de los caracteres en cadena
		//para enviar el siguiente caracter de cadena
	}
}
 266:	8a b1       	in	r24, 0x0a	; 10
 268:	82 60       	ori	r24, 0x02	; 2
 26a:	8a b9       	out	0x0a, r24	; 10
 26c:	8a b1       	in	r24, 0x0a	; 10
 26e:	8e 7f       	andi	r24, 0xFE	; 254
 270:	8a b9       	out	0x0a, r24	; 10
 272:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 276:	88 e9       	ldi	r24, 0x98	; 152
 278:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 27c:	86 e0       	ldi	r24, 0x06	; 6
 27e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 282:	87 e6       	ldi	r24, 0x67	; 103
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 28a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 28e:	08 95       	ret

00000290 <UART_read>:
 290:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 294:	88 23       	and	r24, r24
 296:	1c f4       	brge	.+6      	; 0x29e <UART_read+0xe>
 298:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 29c:	08 95       	ret
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	08 95       	ret

000002a2 <UART_write>:
 2a2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2a6:	95 ff       	sbrs	r25, 5
 2a8:	fc cf       	rjmp	.-8      	; 0x2a2 <UART_write>
 2aa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2ae:	08 95       	ret

000002b0 <UART_write_data>:

void UART_write_data(float dato){
 2b0:	4f 92       	push	r4
 2b2:	5f 92       	push	r5
 2b4:	6f 92       	push	r6
 2b6:	7f 92       	push	r7
 2b8:	8f 92       	push	r8
 2ba:	9f 92       	push	r9
 2bc:	af 92       	push	r10
 2be:	bf 92       	push	r11
 2c0:	cf 92       	push	r12
 2c2:	df 92       	push	r13
 2c4:	ef 92       	push	r14
 2c6:	ff 92       	push	r15
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
 2d4:	2a 97       	sbiw	r28, 0x0a	; 10
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	cd bf       	out	0x3d, r28	; 61
 2e0:	4b 01       	movw	r8, r22
 2e2:	5c 01       	movw	r10, r24
	int16_t data =  (int16_t)dato;
 2e4:	0e 94 a8 02 	call	0x550	; 0x550 <__fixsfsi>
 2e8:	ab 01       	movw	r20, r22
 2ea:	bc 01       	movw	r22, r24
 2ec:	ca 01       	movw	r24, r20
	uint8_t cantidad = 0;
	bool signo = true; //true => '+' / false => '-'/
	uint8_t numeros[10];
	
	if (data<0){
 2ee:	99 23       	and	r25, r25
 2f0:	54 f4       	brge	.+20     	; 0x306 <UART_write_data+0x56>
		signo = false;
		data = data*-1;
 2f2:	88 27       	eor	r24, r24
 2f4:	99 27       	eor	r25, r25
 2f6:	84 1b       	sub	r24, r20
 2f8:	95 0b       	sbc	r25, r21
		dato = dato*-1;
 2fa:	b7 fa       	bst	r11, 7
 2fc:	b0 94       	com	r11
 2fe:	b7 f8       	bld	r11, 7
 300:	b0 94       	com	r11
	uint8_t cantidad = 0;
	bool signo = true; //true => '+' / false => '-'/
	uint8_t numeros[10];
	
	if (data<0){
		signo = false;
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	01 c0       	rjmp	.+2      	; 0x308 <UART_write_data+0x58>
}

void UART_write_data(float dato){
	int16_t data =  (int16_t)dato;
	uint8_t cantidad = 0;
	bool signo = true; //true => '+' / false => '-'/
 306:	41 e0       	ldi	r20, 0x01	; 1
		signo = false;
		data = data*-1;
		dato = dato*-1;
	}
	
	for(int i=0; i<11; i++){
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	30 e0       	ldi	r19, 0x00	; 0
	}
}

void UART_write_data(float dato){
	int16_t data =  (int16_t)dato;
	uint8_t cantidad = 0;
 30c:	c1 2c       	mov	r12, r1
		signo = false;
		data = data*-1;
		dato = dato*-1;
	}
	
	for(int i=0; i<11; i++){
 30e:	1f c0       	rjmp	.+62     	; 0x34e <UART_write_data+0x9e>
		if ( data/10 > 0 ){
 310:	8a 30       	cpi	r24, 0x0A	; 10
 312:	91 05       	cpc	r25, r1
 314:	8c f0       	brlt	.+34     	; 0x338 <UART_write_data+0x88>
			cantidad++;
 316:	c3 94       	inc	r12
			numeros[i] =  data%(10) ;
 318:	6a e0       	ldi	r22, 0x0A	; 10
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	0e 94 d0 05 	call	0xba0	; 0xba0 <__divmodhi4>
 320:	e1 e0       	ldi	r30, 0x01	; 1
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	ec 0f       	add	r30, r28
 326:	fd 1f       	adc	r31, r29
 328:	e2 0f       	add	r30, r18
 32a:	f3 1f       	adc	r31, r19
 32c:	80 83       	st	Z, r24
			data = data/(10);
 32e:	86 2f       	mov	r24, r22
 330:	97 2f       	mov	r25, r23
		signo = false;
		data = data*-1;
		dato = dato*-1;
	}
	
	for(int i=0; i<11; i++){
 332:	2f 5f       	subi	r18, 0xFF	; 255
 334:	3f 4f       	sbci	r19, 0xFF	; 255
 336:	0b c0       	rjmp	.+22     	; 0x34e <UART_write_data+0x9e>
			cantidad++;
			numeros[i] =  data%(10) ;
			data = data/(10);
			
			}else{
			if (data!=0){
 338:	00 97       	sbiw	r24, 0x00	; 0
 33a:	61 f0       	breq	.+24     	; 0x354 <UART_write_data+0xa4>
				cantidad++;
 33c:	c3 94       	inc	r12
				numeros[i] = data;
 33e:	e1 e0       	ldi	r30, 0x01	; 1
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	ec 0f       	add	r30, r28
 344:	fd 1f       	adc	r31, r29
 346:	e2 0f       	add	r30, r18
 348:	f3 1f       	adc	r31, r19
 34a:	80 83       	st	Z, r24
 34c:	03 c0       	rjmp	.+6      	; 0x354 <UART_write_data+0xa4>
		signo = false;
		data = data*-1;
		dato = dato*-1;
	}
	
	for(int i=0; i<11; i++){
 34e:	2b 30       	cpi	r18, 0x0B	; 11
 350:	31 05       	cpc	r19, r1
 352:	f4 f2       	brlt	.-68     	; 0x310 <UART_write_data+0x60>
			}
			break;
		}
	}
	
	if(signo==false){
 354:	41 11       	cpse	r20, r1
 356:	03 c0       	rjmp	.+6      	; 0x35e <UART_write_data+0xae>
		UART_write(45);
 358:	8d e2       	ldi	r24, 0x2D	; 45
 35a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <UART_write>
	}
	if (cantidad == 0 ){
 35e:	c1 10       	cpse	r12, r1
 360:	02 c0       	rjmp	.+4      	; 0x366 <UART_write_data+0xb6>
		cantidad++;
 362:	c3 94       	inc	r12
		numeros[0] = 0;
 364:	19 82       	std	Y+1, r1	; 0x01
	}
	
	for (int i =1; i<cantidad+1; i++){
 366:	ee 24       	eor	r14, r14
 368:	e3 94       	inc	r14
 36a:	f1 2c       	mov	r15, r1
 36c:	33 c0       	rjmp	.+102    	; 0x3d4 <UART_write_data+0x124>
		UART_write(numeros[cantidad-i] + 48);
 36e:	8b 01       	movw	r16, r22
 370:	0e 19       	sub	r16, r14
 372:	1f 09       	sbc	r17, r15
 374:	e1 e0       	ldi	r30, 0x01	; 1
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	ec 0f       	add	r30, r28
 37a:	fd 1f       	adc	r31, r29
 37c:	e0 0f       	add	r30, r16
 37e:	f1 1f       	adc	r31, r17
 380:	d0 80       	ld	r13, Z
 382:	80 e3       	ldi	r24, 0x30	; 48
 384:	8d 0d       	add	r24, r13
 386:	0e 94 51 01 	call	0x2a2	; 0x2a2 <UART_write>
		dato = dato - numeros[cantidad-i]*pow(10,cantidad-i);
 38a:	b8 01       	movw	r22, r16
 38c:	11 0f       	add	r17, r17
 38e:	88 0b       	sbc	r24, r24
 390:	99 0b       	sbc	r25, r25
 392:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__floatsisf>
 396:	9b 01       	movw	r18, r22
 398:	ac 01       	movw	r20, r24
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	80 e2       	ldi	r24, 0x20	; 32
 3a0:	91 e4       	ldi	r25, 0x41	; 65
 3a2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <pow>
 3a6:	2b 01       	movw	r4, r22
 3a8:	3c 01       	movw	r6, r24
 3aa:	6d 2d       	mov	r22, r13
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__floatsisf>
 3b6:	a3 01       	movw	r20, r6
 3b8:	92 01       	movw	r18, r4
 3ba:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__mulsf3>
 3be:	9b 01       	movw	r18, r22
 3c0:	ac 01       	movw	r20, r24
 3c2:	c5 01       	movw	r24, r10
 3c4:	b4 01       	movw	r22, r8
 3c6:	0e 94 3b 02 	call	0x476	; 0x476 <__subsf3>
 3ca:	4b 01       	movw	r8, r22
 3cc:	5c 01       	movw	r10, r24
	if (cantidad == 0 ){
		cantidad++;
		numeros[0] = 0;
	}
	
	for (int i =1; i<cantidad+1; i++){
 3ce:	8f ef       	ldi	r24, 0xFF	; 255
 3d0:	e8 1a       	sub	r14, r24
 3d2:	f8 0a       	sbc	r15, r24
 3d4:	6c 2d       	mov	r22, r12
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	cb 01       	movw	r24, r22
 3da:	01 96       	adiw	r24, 0x01	; 1
 3dc:	e8 16       	cp	r14, r24
 3de:	f9 06       	cpc	r15, r25
 3e0:	34 f2       	brlt	.-116    	; 0x36e <UART_write_data+0xbe>
		UART_write(numeros[cantidad-i] + 48);
		dato = dato - numeros[cantidad-i]*pow(10,cantidad-i);
	}
	UART_write(46);
 3e2:	8e e2       	ldi	r24, 0x2E	; 46
 3e4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <UART_write>
	for (int i = 0; i < 2; i++){
 3e8:	00 e0       	ldi	r16, 0x00	; 0
 3ea:	10 e0       	ldi	r17, 0x00	; 0
 3ec:	2a c0       	rjmp	.+84     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
		dato = dato*10;
 3ee:	20 e0       	ldi	r18, 0x00	; 0
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	40 e2       	ldi	r20, 0x20	; 32
 3f4:	51 e4       	ldi	r21, 0x41	; 65
 3f6:	c5 01       	movw	r24, r10
 3f8:	b4 01       	movw	r22, r8
 3fa:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__mulsf3>
 3fe:	6b 01       	movw	r12, r22
 400:	7c 01       	movw	r14, r24
		UART_write(dato+48);
 402:	20 e0       	ldi	r18, 0x00	; 0
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	40 e4       	ldi	r20, 0x40	; 64
 408:	52 e4       	ldi	r21, 0x42	; 66
 40a:	0e 94 3c 02 	call	0x478	; 0x478 <__addsf3>
 40e:	0e 94 af 02 	call	0x55e	; 0x55e <__fixunssfsi>
 412:	86 2f       	mov	r24, r22
 414:	0e 94 51 01 	call	0x2a2	; 0x2a2 <UART_write>
		dato = dato - (int8_t)dato;
 418:	c7 01       	movw	r24, r14
 41a:	b6 01       	movw	r22, r12
 41c:	0e 94 a8 02 	call	0x550	; 0x550 <__fixsfsi>
 420:	06 2e       	mov	r0, r22
 422:	00 0c       	add	r0, r0
 424:	77 0b       	sbc	r23, r23
 426:	88 0b       	sbc	r24, r24
 428:	99 0b       	sbc	r25, r25
 42a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__floatsisf>
 42e:	9b 01       	movw	r18, r22
 430:	ac 01       	movw	r20, r24
 432:	c7 01       	movw	r24, r14
 434:	b6 01       	movw	r22, r12
 436:	0e 94 3b 02 	call	0x476	; 0x476 <__subsf3>
 43a:	4b 01       	movw	r8, r22
 43c:	5c 01       	movw	r10, r24
	for (int i =1; i<cantidad+1; i++){
		UART_write(numeros[cantidad-i] + 48);
		dato = dato - numeros[cantidad-i]*pow(10,cantidad-i);
	}
	UART_write(46);
	for (int i = 0; i < 2; i++){
 43e:	0f 5f       	subi	r16, 0xFF	; 255
 440:	1f 4f       	sbci	r17, 0xFF	; 255
 442:	02 30       	cpi	r16, 0x02	; 2
 444:	11 05       	cpc	r17, r1
 446:	9c f2       	brlt	.-90     	; 0x3ee <UART_write_data+0x13e>
		dato = dato*10;
		UART_write(dato+48);
		dato = dato - (int8_t)dato;
	}
 448:	2a 96       	adiw	r28, 0x0a	; 10
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	f8 94       	cli
 44e:	de bf       	out	0x3e, r29	; 62
 450:	0f be       	out	0x3f, r0	; 63
 452:	cd bf       	out	0x3d, r28	; 61
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	1f 91       	pop	r17
 45a:	0f 91       	pop	r16
 45c:	ff 90       	pop	r15
 45e:	ef 90       	pop	r14
 460:	df 90       	pop	r13
 462:	cf 90       	pop	r12
 464:	bf 90       	pop	r11
 466:	af 90       	pop	r10
 468:	9f 90       	pop	r9
 46a:	8f 90       	pop	r8
 46c:	7f 90       	pop	r7
 46e:	6f 90       	pop	r6
 470:	5f 90       	pop	r5
 472:	4f 90       	pop	r4
 474:	08 95       	ret

00000476 <__subsf3>:
 476:	50 58       	subi	r21, 0x80	; 128

00000478 <__addsf3>:
 478:	bb 27       	eor	r27, r27
 47a:	aa 27       	eor	r26, r26
 47c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__addsf3x>
 480:	0c 94 32 03 	jmp	0x664	; 0x664 <__fp_round>
 484:	0e 94 24 03 	call	0x648	; 0x648 <__fp_pscA>
 488:	38 f0       	brcs	.+14     	; 0x498 <__addsf3+0x20>
 48a:	0e 94 2b 03 	call	0x656	; 0x656 <__fp_pscB>
 48e:	20 f0       	brcs	.+8      	; 0x498 <__addsf3+0x20>
 490:	39 f4       	brne	.+14     	; 0x4a0 <__addsf3+0x28>
 492:	9f 3f       	cpi	r25, 0xFF	; 255
 494:	19 f4       	brne	.+6      	; 0x49c <__addsf3+0x24>
 496:	26 f4       	brtc	.+8      	; 0x4a0 <__addsf3+0x28>
 498:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_nan>
 49c:	0e f4       	brtc	.+2      	; 0x4a0 <__addsf3+0x28>
 49e:	e0 95       	com	r30
 4a0:	e7 fb       	bst	r30, 7
 4a2:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_inf>

000004a6 <__addsf3x>:
 4a6:	e9 2f       	mov	r30, r25
 4a8:	0e 94 43 03 	call	0x686	; 0x686 <__fp_split3>
 4ac:	58 f3       	brcs	.-42     	; 0x484 <__addsf3+0xc>
 4ae:	ba 17       	cp	r27, r26
 4b0:	62 07       	cpc	r22, r18
 4b2:	73 07       	cpc	r23, r19
 4b4:	84 07       	cpc	r24, r20
 4b6:	95 07       	cpc	r25, r21
 4b8:	20 f0       	brcs	.+8      	; 0x4c2 <__addsf3x+0x1c>
 4ba:	79 f4       	brne	.+30     	; 0x4da <__addsf3x+0x34>
 4bc:	a6 f5       	brtc	.+104    	; 0x526 <__addsf3x+0x80>
 4be:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__fp_zero>
 4c2:	0e f4       	brtc	.+2      	; 0x4c6 <__addsf3x+0x20>
 4c4:	e0 95       	com	r30
 4c6:	0b 2e       	mov	r0, r27
 4c8:	ba 2f       	mov	r27, r26
 4ca:	a0 2d       	mov	r26, r0
 4cc:	0b 01       	movw	r0, r22
 4ce:	b9 01       	movw	r22, r18
 4d0:	90 01       	movw	r18, r0
 4d2:	0c 01       	movw	r0, r24
 4d4:	ca 01       	movw	r24, r20
 4d6:	a0 01       	movw	r20, r0
 4d8:	11 24       	eor	r1, r1
 4da:	ff 27       	eor	r31, r31
 4dc:	59 1b       	sub	r21, r25
 4de:	99 f0       	breq	.+38     	; 0x506 <__addsf3x+0x60>
 4e0:	59 3f       	cpi	r21, 0xF9	; 249
 4e2:	50 f4       	brcc	.+20     	; 0x4f8 <__addsf3x+0x52>
 4e4:	50 3e       	cpi	r21, 0xE0	; 224
 4e6:	68 f1       	brcs	.+90     	; 0x542 <__addsf3x+0x9c>
 4e8:	1a 16       	cp	r1, r26
 4ea:	f0 40       	sbci	r31, 0x00	; 0
 4ec:	a2 2f       	mov	r26, r18
 4ee:	23 2f       	mov	r18, r19
 4f0:	34 2f       	mov	r19, r20
 4f2:	44 27       	eor	r20, r20
 4f4:	58 5f       	subi	r21, 0xF8	; 248
 4f6:	f3 cf       	rjmp	.-26     	; 0x4de <__addsf3x+0x38>
 4f8:	46 95       	lsr	r20
 4fa:	37 95       	ror	r19
 4fc:	27 95       	ror	r18
 4fe:	a7 95       	ror	r26
 500:	f0 40       	sbci	r31, 0x00	; 0
 502:	53 95       	inc	r21
 504:	c9 f7       	brne	.-14     	; 0x4f8 <__addsf3x+0x52>
 506:	7e f4       	brtc	.+30     	; 0x526 <__addsf3x+0x80>
 508:	1f 16       	cp	r1, r31
 50a:	ba 0b       	sbc	r27, r26
 50c:	62 0b       	sbc	r22, r18
 50e:	73 0b       	sbc	r23, r19
 510:	84 0b       	sbc	r24, r20
 512:	ba f0       	brmi	.+46     	; 0x542 <__addsf3x+0x9c>
 514:	91 50       	subi	r25, 0x01	; 1
 516:	a1 f0       	breq	.+40     	; 0x540 <__addsf3x+0x9a>
 518:	ff 0f       	add	r31, r31
 51a:	bb 1f       	adc	r27, r27
 51c:	66 1f       	adc	r22, r22
 51e:	77 1f       	adc	r23, r23
 520:	88 1f       	adc	r24, r24
 522:	c2 f7       	brpl	.-16     	; 0x514 <__addsf3x+0x6e>
 524:	0e c0       	rjmp	.+28     	; 0x542 <__addsf3x+0x9c>
 526:	ba 0f       	add	r27, r26
 528:	62 1f       	adc	r22, r18
 52a:	73 1f       	adc	r23, r19
 52c:	84 1f       	adc	r24, r20
 52e:	48 f4       	brcc	.+18     	; 0x542 <__addsf3x+0x9c>
 530:	87 95       	ror	r24
 532:	77 95       	ror	r23
 534:	67 95       	ror	r22
 536:	b7 95       	ror	r27
 538:	f7 95       	ror	r31
 53a:	9e 3f       	cpi	r25, 0xFE	; 254
 53c:	08 f0       	brcs	.+2      	; 0x540 <__addsf3x+0x9a>
 53e:	b0 cf       	rjmp	.-160    	; 0x4a0 <__addsf3+0x28>
 540:	93 95       	inc	r25
 542:	88 0f       	add	r24, r24
 544:	08 f0       	brcs	.+2      	; 0x548 <__addsf3x+0xa2>
 546:	99 27       	eor	r25, r25
 548:	ee 0f       	add	r30, r30
 54a:	97 95       	ror	r25
 54c:	87 95       	ror	r24
 54e:	08 95       	ret

00000550 <__fixsfsi>:
 550:	0e 94 af 02 	call	0x55e	; 0x55e <__fixunssfsi>
 554:	68 94       	set
 556:	b1 11       	cpse	r27, r1
 558:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__fp_szero>
 55c:	08 95       	ret

0000055e <__fixunssfsi>:
 55e:	0e 94 4b 03 	call	0x696	; 0x696 <__fp_splitA>
 562:	88 f0       	brcs	.+34     	; 0x586 <__fixunssfsi+0x28>
 564:	9f 57       	subi	r25, 0x7F	; 127
 566:	98 f0       	brcs	.+38     	; 0x58e <__fixunssfsi+0x30>
 568:	b9 2f       	mov	r27, r25
 56a:	99 27       	eor	r25, r25
 56c:	b7 51       	subi	r27, 0x17	; 23
 56e:	b0 f0       	brcs	.+44     	; 0x59c <__fixunssfsi+0x3e>
 570:	e1 f0       	breq	.+56     	; 0x5aa <__fixunssfsi+0x4c>
 572:	66 0f       	add	r22, r22
 574:	77 1f       	adc	r23, r23
 576:	88 1f       	adc	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	1a f0       	brmi	.+6      	; 0x582 <__fixunssfsi+0x24>
 57c:	ba 95       	dec	r27
 57e:	c9 f7       	brne	.-14     	; 0x572 <__fixunssfsi+0x14>
 580:	14 c0       	rjmp	.+40     	; 0x5aa <__fixunssfsi+0x4c>
 582:	b1 30       	cpi	r27, 0x01	; 1
 584:	91 f0       	breq	.+36     	; 0x5aa <__fixunssfsi+0x4c>
 586:	0e 94 65 03 	call	0x6ca	; 0x6ca <__fp_zero>
 58a:	b1 e0       	ldi	r27, 0x01	; 1
 58c:	08 95       	ret
 58e:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__fp_zero>
 592:	67 2f       	mov	r22, r23
 594:	78 2f       	mov	r23, r24
 596:	88 27       	eor	r24, r24
 598:	b8 5f       	subi	r27, 0xF8	; 248
 59a:	39 f0       	breq	.+14     	; 0x5aa <__fixunssfsi+0x4c>
 59c:	b9 3f       	cpi	r27, 0xF9	; 249
 59e:	cc f3       	brlt	.-14     	; 0x592 <__fixunssfsi+0x34>
 5a0:	86 95       	lsr	r24
 5a2:	77 95       	ror	r23
 5a4:	67 95       	ror	r22
 5a6:	b3 95       	inc	r27
 5a8:	d9 f7       	brne	.-10     	; 0x5a0 <__fixunssfsi+0x42>
 5aa:	3e f4       	brtc	.+14     	; 0x5ba <__fixunssfsi+0x5c>
 5ac:	90 95       	com	r25
 5ae:	80 95       	com	r24
 5b0:	70 95       	com	r23
 5b2:	61 95       	neg	r22
 5b4:	7f 4f       	sbci	r23, 0xFF	; 255
 5b6:	8f 4f       	sbci	r24, 0xFF	; 255
 5b8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ba:	08 95       	ret

000005bc <__floatunsisf>:
 5bc:	e8 94       	clt
 5be:	09 c0       	rjmp	.+18     	; 0x5d2 <__floatsisf+0x12>

000005c0 <__floatsisf>:
 5c0:	97 fb       	bst	r25, 7
 5c2:	3e f4       	brtc	.+14     	; 0x5d2 <__floatsisf+0x12>
 5c4:	90 95       	com	r25
 5c6:	80 95       	com	r24
 5c8:	70 95       	com	r23
 5ca:	61 95       	neg	r22
 5cc:	7f 4f       	sbci	r23, 0xFF	; 255
 5ce:	8f 4f       	sbci	r24, 0xFF	; 255
 5d0:	9f 4f       	sbci	r25, 0xFF	; 255
 5d2:	99 23       	and	r25, r25
 5d4:	a9 f0       	breq	.+42     	; 0x600 <__floatsisf+0x40>
 5d6:	f9 2f       	mov	r31, r25
 5d8:	96 e9       	ldi	r25, 0x96	; 150
 5da:	bb 27       	eor	r27, r27
 5dc:	93 95       	inc	r25
 5de:	f6 95       	lsr	r31
 5e0:	87 95       	ror	r24
 5e2:	77 95       	ror	r23
 5e4:	67 95       	ror	r22
 5e6:	b7 95       	ror	r27
 5e8:	f1 11       	cpse	r31, r1
 5ea:	f8 cf       	rjmp	.-16     	; 0x5dc <__floatsisf+0x1c>
 5ec:	fa f4       	brpl	.+62     	; 0x62c <__floatsisf+0x6c>
 5ee:	bb 0f       	add	r27, r27
 5f0:	11 f4       	brne	.+4      	; 0x5f6 <__floatsisf+0x36>
 5f2:	60 ff       	sbrs	r22, 0
 5f4:	1b c0       	rjmp	.+54     	; 0x62c <__floatsisf+0x6c>
 5f6:	6f 5f       	subi	r22, 0xFF	; 255
 5f8:	7f 4f       	sbci	r23, 0xFF	; 255
 5fa:	8f 4f       	sbci	r24, 0xFF	; 255
 5fc:	9f 4f       	sbci	r25, 0xFF	; 255
 5fe:	16 c0       	rjmp	.+44     	; 0x62c <__floatsisf+0x6c>
 600:	88 23       	and	r24, r24
 602:	11 f0       	breq	.+4      	; 0x608 <__floatsisf+0x48>
 604:	96 e9       	ldi	r25, 0x96	; 150
 606:	11 c0       	rjmp	.+34     	; 0x62a <__floatsisf+0x6a>
 608:	77 23       	and	r23, r23
 60a:	21 f0       	breq	.+8      	; 0x614 <__floatsisf+0x54>
 60c:	9e e8       	ldi	r25, 0x8E	; 142
 60e:	87 2f       	mov	r24, r23
 610:	76 2f       	mov	r23, r22
 612:	05 c0       	rjmp	.+10     	; 0x61e <__floatsisf+0x5e>
 614:	66 23       	and	r22, r22
 616:	71 f0       	breq	.+28     	; 0x634 <__floatsisf+0x74>
 618:	96 e8       	ldi	r25, 0x86	; 134
 61a:	86 2f       	mov	r24, r22
 61c:	70 e0       	ldi	r23, 0x00	; 0
 61e:	60 e0       	ldi	r22, 0x00	; 0
 620:	2a f0       	brmi	.+10     	; 0x62c <__floatsisf+0x6c>
 622:	9a 95       	dec	r25
 624:	66 0f       	add	r22, r22
 626:	77 1f       	adc	r23, r23
 628:	88 1f       	adc	r24, r24
 62a:	da f7       	brpl	.-10     	; 0x622 <__floatsisf+0x62>
 62c:	88 0f       	add	r24, r24
 62e:	96 95       	lsr	r25
 630:	87 95       	ror	r24
 632:	97 f9       	bld	r25, 7
 634:	08 95       	ret

00000636 <__fp_inf>:
 636:	97 f9       	bld	r25, 7
 638:	9f 67       	ori	r25, 0x7F	; 127
 63a:	80 e8       	ldi	r24, 0x80	; 128
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	60 e0       	ldi	r22, 0x00	; 0
 640:	08 95       	ret

00000642 <__fp_nan>:
 642:	9f ef       	ldi	r25, 0xFF	; 255
 644:	80 ec       	ldi	r24, 0xC0	; 192
 646:	08 95       	ret

00000648 <__fp_pscA>:
 648:	00 24       	eor	r0, r0
 64a:	0a 94       	dec	r0
 64c:	16 16       	cp	r1, r22
 64e:	17 06       	cpc	r1, r23
 650:	18 06       	cpc	r1, r24
 652:	09 06       	cpc	r0, r25
 654:	08 95       	ret

00000656 <__fp_pscB>:
 656:	00 24       	eor	r0, r0
 658:	0a 94       	dec	r0
 65a:	12 16       	cp	r1, r18
 65c:	13 06       	cpc	r1, r19
 65e:	14 06       	cpc	r1, r20
 660:	05 06       	cpc	r0, r21
 662:	08 95       	ret

00000664 <__fp_round>:
 664:	09 2e       	mov	r0, r25
 666:	03 94       	inc	r0
 668:	00 0c       	add	r0, r0
 66a:	11 f4       	brne	.+4      	; 0x670 <__fp_round+0xc>
 66c:	88 23       	and	r24, r24
 66e:	52 f0       	brmi	.+20     	; 0x684 <__fp_round+0x20>
 670:	bb 0f       	add	r27, r27
 672:	40 f4       	brcc	.+16     	; 0x684 <__fp_round+0x20>
 674:	bf 2b       	or	r27, r31
 676:	11 f4       	brne	.+4      	; 0x67c <__fp_round+0x18>
 678:	60 ff       	sbrs	r22, 0
 67a:	04 c0       	rjmp	.+8      	; 0x684 <__fp_round+0x20>
 67c:	6f 5f       	subi	r22, 0xFF	; 255
 67e:	7f 4f       	sbci	r23, 0xFF	; 255
 680:	8f 4f       	sbci	r24, 0xFF	; 255
 682:	9f 4f       	sbci	r25, 0xFF	; 255
 684:	08 95       	ret

00000686 <__fp_split3>:
 686:	57 fd       	sbrc	r21, 7
 688:	90 58       	subi	r25, 0x80	; 128
 68a:	44 0f       	add	r20, r20
 68c:	55 1f       	adc	r21, r21
 68e:	59 f0       	breq	.+22     	; 0x6a6 <__fp_splitA+0x10>
 690:	5f 3f       	cpi	r21, 0xFF	; 255
 692:	71 f0       	breq	.+28     	; 0x6b0 <__fp_splitA+0x1a>
 694:	47 95       	ror	r20

00000696 <__fp_splitA>:
 696:	88 0f       	add	r24, r24
 698:	97 fb       	bst	r25, 7
 69a:	99 1f       	adc	r25, r25
 69c:	61 f0       	breq	.+24     	; 0x6b6 <__fp_splitA+0x20>
 69e:	9f 3f       	cpi	r25, 0xFF	; 255
 6a0:	79 f0       	breq	.+30     	; 0x6c0 <__fp_splitA+0x2a>
 6a2:	87 95       	ror	r24
 6a4:	08 95       	ret
 6a6:	12 16       	cp	r1, r18
 6a8:	13 06       	cpc	r1, r19
 6aa:	14 06       	cpc	r1, r20
 6ac:	55 1f       	adc	r21, r21
 6ae:	f2 cf       	rjmp	.-28     	; 0x694 <__fp_split3+0xe>
 6b0:	46 95       	lsr	r20
 6b2:	f1 df       	rcall	.-30     	; 0x696 <__fp_splitA>
 6b4:	08 c0       	rjmp	.+16     	; 0x6c6 <__fp_splitA+0x30>
 6b6:	16 16       	cp	r1, r22
 6b8:	17 06       	cpc	r1, r23
 6ba:	18 06       	cpc	r1, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	f1 cf       	rjmp	.-30     	; 0x6a2 <__fp_splitA+0xc>
 6c0:	86 95       	lsr	r24
 6c2:	71 05       	cpc	r23, r1
 6c4:	61 05       	cpc	r22, r1
 6c6:	08 94       	sec
 6c8:	08 95       	ret

000006ca <__fp_zero>:
 6ca:	e8 94       	clt

000006cc <__fp_szero>:
 6cc:	bb 27       	eor	r27, r27
 6ce:	66 27       	eor	r22, r22
 6d0:	77 27       	eor	r23, r23
 6d2:	cb 01       	movw	r24, r22
 6d4:	97 f9       	bld	r25, 7
 6d6:	08 95       	ret

000006d8 <__mulsf3>:
 6d8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__mulsf3x>
 6dc:	0c 94 32 03 	jmp	0x664	; 0x664 <__fp_round>
 6e0:	0e 94 24 03 	call	0x648	; 0x648 <__fp_pscA>
 6e4:	38 f0       	brcs	.+14     	; 0x6f4 <__mulsf3+0x1c>
 6e6:	0e 94 2b 03 	call	0x656	; 0x656 <__fp_pscB>
 6ea:	20 f0       	brcs	.+8      	; 0x6f4 <__mulsf3+0x1c>
 6ec:	95 23       	and	r25, r21
 6ee:	11 f0       	breq	.+4      	; 0x6f4 <__mulsf3+0x1c>
 6f0:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_inf>
 6f4:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_nan>
 6f8:	11 24       	eor	r1, r1
 6fa:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__fp_szero>

000006fe <__mulsf3x>:
 6fe:	0e 94 43 03 	call	0x686	; 0x686 <__fp_split3>
 702:	70 f3       	brcs	.-36     	; 0x6e0 <__mulsf3+0x8>

00000704 <__mulsf3_pse>:
 704:	95 9f       	mul	r25, r21
 706:	c1 f3       	breq	.-16     	; 0x6f8 <__mulsf3+0x20>
 708:	95 0f       	add	r25, r21
 70a:	50 e0       	ldi	r21, 0x00	; 0
 70c:	55 1f       	adc	r21, r21
 70e:	62 9f       	mul	r22, r18
 710:	f0 01       	movw	r30, r0
 712:	72 9f       	mul	r23, r18
 714:	bb 27       	eor	r27, r27
 716:	f0 0d       	add	r31, r0
 718:	b1 1d       	adc	r27, r1
 71a:	63 9f       	mul	r22, r19
 71c:	aa 27       	eor	r26, r26
 71e:	f0 0d       	add	r31, r0
 720:	b1 1d       	adc	r27, r1
 722:	aa 1f       	adc	r26, r26
 724:	64 9f       	mul	r22, r20
 726:	66 27       	eor	r22, r22
 728:	b0 0d       	add	r27, r0
 72a:	a1 1d       	adc	r26, r1
 72c:	66 1f       	adc	r22, r22
 72e:	82 9f       	mul	r24, r18
 730:	22 27       	eor	r18, r18
 732:	b0 0d       	add	r27, r0
 734:	a1 1d       	adc	r26, r1
 736:	62 1f       	adc	r22, r18
 738:	73 9f       	mul	r23, r19
 73a:	b0 0d       	add	r27, r0
 73c:	a1 1d       	adc	r26, r1
 73e:	62 1f       	adc	r22, r18
 740:	83 9f       	mul	r24, r19
 742:	a0 0d       	add	r26, r0
 744:	61 1d       	adc	r22, r1
 746:	22 1f       	adc	r18, r18
 748:	74 9f       	mul	r23, r20
 74a:	33 27       	eor	r19, r19
 74c:	a0 0d       	add	r26, r0
 74e:	61 1d       	adc	r22, r1
 750:	23 1f       	adc	r18, r19
 752:	84 9f       	mul	r24, r20
 754:	60 0d       	add	r22, r0
 756:	21 1d       	adc	r18, r1
 758:	82 2f       	mov	r24, r18
 75a:	76 2f       	mov	r23, r22
 75c:	6a 2f       	mov	r22, r26
 75e:	11 24       	eor	r1, r1
 760:	9f 57       	subi	r25, 0x7F	; 127
 762:	50 40       	sbci	r21, 0x00	; 0
 764:	9a f0       	brmi	.+38     	; 0x78c <__mulsf3_pse+0x88>
 766:	f1 f0       	breq	.+60     	; 0x7a4 <__mulsf3_pse+0xa0>
 768:	88 23       	and	r24, r24
 76a:	4a f0       	brmi	.+18     	; 0x77e <__mulsf3_pse+0x7a>
 76c:	ee 0f       	add	r30, r30
 76e:	ff 1f       	adc	r31, r31
 770:	bb 1f       	adc	r27, r27
 772:	66 1f       	adc	r22, r22
 774:	77 1f       	adc	r23, r23
 776:	88 1f       	adc	r24, r24
 778:	91 50       	subi	r25, 0x01	; 1
 77a:	50 40       	sbci	r21, 0x00	; 0
 77c:	a9 f7       	brne	.-22     	; 0x768 <__mulsf3_pse+0x64>
 77e:	9e 3f       	cpi	r25, 0xFE	; 254
 780:	51 05       	cpc	r21, r1
 782:	80 f0       	brcs	.+32     	; 0x7a4 <__mulsf3_pse+0xa0>
 784:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_inf>
 788:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__fp_szero>
 78c:	5f 3f       	cpi	r21, 0xFF	; 255
 78e:	e4 f3       	brlt	.-8      	; 0x788 <__mulsf3_pse+0x84>
 790:	98 3e       	cpi	r25, 0xE8	; 232
 792:	d4 f3       	brlt	.-12     	; 0x788 <__mulsf3_pse+0x84>
 794:	86 95       	lsr	r24
 796:	77 95       	ror	r23
 798:	67 95       	ror	r22
 79a:	b7 95       	ror	r27
 79c:	f7 95       	ror	r31
 79e:	e7 95       	ror	r30
 7a0:	9f 5f       	subi	r25, 0xFF	; 255
 7a2:	c1 f7       	brne	.-16     	; 0x794 <__mulsf3_pse+0x90>
 7a4:	fe 2b       	or	r31, r30
 7a6:	88 0f       	add	r24, r24
 7a8:	91 1d       	adc	r25, r1
 7aa:	96 95       	lsr	r25
 7ac:	87 95       	ror	r24
 7ae:	97 f9       	bld	r25, 7
 7b0:	08 95       	ret

000007b2 <pow>:
 7b2:	fa 01       	movw	r30, r20
 7b4:	ee 0f       	add	r30, r30
 7b6:	ff 1f       	adc	r31, r31
 7b8:	30 96       	adiw	r30, 0x00	; 0
 7ba:	21 05       	cpc	r18, r1
 7bc:	31 05       	cpc	r19, r1
 7be:	a1 f1       	breq	.+104    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 7c0:	61 15       	cp	r22, r1
 7c2:	71 05       	cpc	r23, r1
 7c4:	61 f4       	brne	.+24     	; 0x7de <pow+0x2c>
 7c6:	80 38       	cpi	r24, 0x80	; 128
 7c8:	bf e3       	ldi	r27, 0x3F	; 63
 7ca:	9b 07       	cpc	r25, r27
 7cc:	49 f1       	breq	.+82     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 7ce:	68 94       	set
 7d0:	90 38       	cpi	r25, 0x80	; 128
 7d2:	81 05       	cpc	r24, r1
 7d4:	61 f0       	breq	.+24     	; 0x7ee <pow+0x3c>
 7d6:	80 38       	cpi	r24, 0x80	; 128
 7d8:	bf ef       	ldi	r27, 0xFF	; 255
 7da:	9b 07       	cpc	r25, r27
 7dc:	41 f0       	breq	.+16     	; 0x7ee <pow+0x3c>
 7de:	99 23       	and	r25, r25
 7e0:	4a f5       	brpl	.+82     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 7e2:	ff 3f       	cpi	r31, 0xFF	; 255
 7e4:	e1 05       	cpc	r30, r1
 7e6:	31 05       	cpc	r19, r1
 7e8:	21 05       	cpc	r18, r1
 7ea:	19 f1       	breq	.+70     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 7ec:	e8 94       	clt
 7ee:	08 94       	sec
 7f0:	e7 95       	ror	r30
 7f2:	d9 01       	movw	r26, r18
 7f4:	aa 23       	and	r26, r26
 7f6:	29 f4       	brne	.+10     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7f8:	ab 2f       	mov	r26, r27
 7fa:	be 2f       	mov	r27, r30
 7fc:	f8 5f       	subi	r31, 0xF8	; 248
 7fe:	d0 f3       	brcs	.-12     	; 0x7f4 <pow+0x42>
 800:	10 c0       	rjmp	.+32     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 802:	ff 5f       	subi	r31, 0xFF	; 255
 804:	70 f4       	brcc	.+28     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 806:	a6 95       	lsr	r26
 808:	e0 f7       	brcc	.-8      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 80a:	f7 39       	cpi	r31, 0x97	; 151
 80c:	50 f0       	brcs	.+20     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 80e:	19 f0       	breq	.+6      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 810:	ff 3a       	cpi	r31, 0xAF	; 175
 812:	38 f4       	brcc	.+14     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 814:	9f 77       	andi	r25, 0x7F	; 127
 816:	9f 93       	push	r25
 818:	0d d0       	rcall	.+26     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 81a:	0f 90       	pop	r0
 81c:	07 fc       	sbrc	r0, 7
 81e:	90 58       	subi	r25, 0x80	; 128
 820:	08 95       	ret
 822:	46 f0       	brts	.+16     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 824:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_nan>
 828:	60 e0       	ldi	r22, 0x00	; 0
 82a:	70 e0       	ldi	r23, 0x00	; 0
 82c:	80 e8       	ldi	r24, 0x80	; 128
 82e:	9f e3       	ldi	r25, 0x3F	; 63
 830:	08 95       	ret
 832:	4f e7       	ldi	r20, 0x7F	; 127
 834:	9f 77       	andi	r25, 0x7F	; 127
 836:	5f 93       	push	r21
 838:	4f 93       	push	r20
 83a:	3f 93       	push	r19
 83c:	2f 93       	push	r18
 83e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <log>
 842:	2f 91       	pop	r18
 844:	3f 91       	pop	r19
 846:	4f 91       	pop	r20
 848:	5f 91       	pop	r21
 84a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__mulsf3>
 84e:	0c 94 31 04 	jmp	0x862	; 0x862 <exp>
 852:	29 f4       	brne	.+10     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 854:	16 f0       	brts	.+4      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 856:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_inf>
 85a:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__fp_zero>
 85e:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_nan>

00000862 <exp>:
 862:	0e 94 4b 03 	call	0x696	; 0x696 <__fp_splitA>
 866:	a8 f3       	brcs	.-22     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 868:	96 38       	cpi	r25, 0x86	; 134
 86a:	a0 f7       	brcc	.-24     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 86c:	07 f8       	bld	r0, 7
 86e:	0f 92       	push	r0
 870:	e8 94       	clt
 872:	2b e3       	ldi	r18, 0x3B	; 59
 874:	3a ea       	ldi	r19, 0xAA	; 170
 876:	48 eb       	ldi	r20, 0xB8	; 184
 878:	5f e7       	ldi	r21, 0x7F	; 127
 87a:	0e 94 82 03 	call	0x704	; 0x704 <__mulsf3_pse>
 87e:	0f 92       	push	r0
 880:	0f 92       	push	r0
 882:	0f 92       	push	r0
 884:	4d b7       	in	r20, 0x3d	; 61
 886:	5e b7       	in	r21, 0x3e	; 62
 888:	0f 92       	push	r0
 88a:	0e 94 1c 05 	call	0xa38	; 0xa38 <modf>
 88e:	e8 e6       	ldi	r30, 0x68	; 104
 890:	f0 e0       	ldi	r31, 0x00	; 0
 892:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__fp_powser>
 896:	4f 91       	pop	r20
 898:	5f 91       	pop	r21
 89a:	ef 91       	pop	r30
 89c:	ff 91       	pop	r31
 89e:	e5 95       	asr	r30
 8a0:	ee 1f       	adc	r30, r30
 8a2:	ff 1f       	adc	r31, r31
 8a4:	49 f0       	breq	.+18     	; 0x8b8 <exp+0x56>
 8a6:	fe 57       	subi	r31, 0x7E	; 126
 8a8:	e0 68       	ori	r30, 0x80	; 128
 8aa:	44 27       	eor	r20, r20
 8ac:	ee 0f       	add	r30, r30
 8ae:	44 1f       	adc	r20, r20
 8b0:	fa 95       	dec	r31
 8b2:	e1 f7       	brne	.-8      	; 0x8ac <exp+0x4a>
 8b4:	41 95       	neg	r20
 8b6:	55 0b       	sbc	r21, r21
 8b8:	0e 94 96 04 	call	0x92c	; 0x92c <ldexp>
 8bc:	0f 90       	pop	r0
 8be:	07 fe       	sbrs	r0, 7
 8c0:	0c 94 8a 04 	jmp	0x914	; 0x914 <inverse>
 8c4:	08 95       	ret

000008c6 <__fp_powser>:
 8c6:	df 93       	push	r29
 8c8:	cf 93       	push	r28
 8ca:	1f 93       	push	r17
 8cc:	0f 93       	push	r16
 8ce:	ff 92       	push	r15
 8d0:	ef 92       	push	r14
 8d2:	df 92       	push	r13
 8d4:	7b 01       	movw	r14, r22
 8d6:	8c 01       	movw	r16, r24
 8d8:	68 94       	set
 8da:	06 c0       	rjmp	.+12     	; 0x8e8 <__fp_powser+0x22>
 8dc:	da 2e       	mov	r13, r26
 8de:	ef 01       	movw	r28, r30
 8e0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__mulsf3x>
 8e4:	fe 01       	movw	r30, r28
 8e6:	e8 94       	clt
 8e8:	a5 91       	lpm	r26, Z+
 8ea:	25 91       	lpm	r18, Z+
 8ec:	35 91       	lpm	r19, Z+
 8ee:	45 91       	lpm	r20, Z+
 8f0:	55 91       	lpm	r21, Z+
 8f2:	a6 f3       	brts	.-24     	; 0x8dc <__fp_powser+0x16>
 8f4:	ef 01       	movw	r28, r30
 8f6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__addsf3x>
 8fa:	fe 01       	movw	r30, r28
 8fc:	97 01       	movw	r18, r14
 8fe:	a8 01       	movw	r20, r16
 900:	da 94       	dec	r13
 902:	69 f7       	brne	.-38     	; 0x8de <__fp_powser+0x18>
 904:	df 90       	pop	r13
 906:	ef 90       	pop	r14
 908:	ff 90       	pop	r15
 90a:	0f 91       	pop	r16
 90c:	1f 91       	pop	r17
 90e:	cf 91       	pop	r28
 910:	df 91       	pop	r29
 912:	08 95       	ret

00000914 <inverse>:
 914:	9b 01       	movw	r18, r22
 916:	ac 01       	movw	r20, r24
 918:	60 e0       	ldi	r22, 0x00	; 0
 91a:	70 e0       	ldi	r23, 0x00	; 0
 91c:	80 e8       	ldi	r24, 0x80	; 128
 91e:	9f e3       	ldi	r25, 0x3F	; 63
 920:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__divsf3>
 924:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_inf>
 928:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__fp_mpack>

0000092c <ldexp>:
 92c:	0e 94 4b 03 	call	0x696	; 0x696 <__fp_splitA>
 930:	d8 f3       	brcs	.-10     	; 0x928 <inverse+0x14>
 932:	99 23       	and	r25, r25
 934:	c9 f3       	breq	.-14     	; 0x928 <inverse+0x14>
 936:	94 0f       	add	r25, r20
 938:	51 1d       	adc	r21, r1
 93a:	a3 f3       	brvs	.-24     	; 0x924 <inverse+0x10>
 93c:	91 50       	subi	r25, 0x01	; 1
 93e:	50 40       	sbci	r21, 0x00	; 0
 940:	94 f0       	brlt	.+36     	; 0x966 <ldexp+0x3a>
 942:	59 f0       	breq	.+22     	; 0x95a <ldexp+0x2e>
 944:	88 23       	and	r24, r24
 946:	32 f0       	brmi	.+12     	; 0x954 <ldexp+0x28>
 948:	66 0f       	add	r22, r22
 94a:	77 1f       	adc	r23, r23
 94c:	88 1f       	adc	r24, r24
 94e:	91 50       	subi	r25, 0x01	; 1
 950:	50 40       	sbci	r21, 0x00	; 0
 952:	c1 f7       	brne	.-16     	; 0x944 <ldexp+0x18>
 954:	9e 3f       	cpi	r25, 0xFE	; 254
 956:	51 05       	cpc	r21, r1
 958:	2c f7       	brge	.-54     	; 0x924 <inverse+0x10>
 95a:	88 0f       	add	r24, r24
 95c:	91 1d       	adc	r25, r1
 95e:	96 95       	lsr	r25
 960:	87 95       	ror	r24
 962:	97 f9       	bld	r25, 7
 964:	08 95       	ret
 966:	5f 3f       	cpi	r21, 0xFF	; 255
 968:	ac f0       	brlt	.+42     	; 0x994 <ldexp+0x68>
 96a:	98 3e       	cpi	r25, 0xE8	; 232
 96c:	9c f0       	brlt	.+38     	; 0x994 <ldexp+0x68>
 96e:	bb 27       	eor	r27, r27
 970:	86 95       	lsr	r24
 972:	77 95       	ror	r23
 974:	67 95       	ror	r22
 976:	b7 95       	ror	r27
 978:	08 f4       	brcc	.+2      	; 0x97c <ldexp+0x50>
 97a:	b1 60       	ori	r27, 0x01	; 1
 97c:	93 95       	inc	r25
 97e:	c1 f7       	brne	.-16     	; 0x970 <ldexp+0x44>
 980:	bb 0f       	add	r27, r27
 982:	58 f7       	brcc	.-42     	; 0x95a <ldexp+0x2e>
 984:	11 f4       	brne	.+4      	; 0x98a <ldexp+0x5e>
 986:	60 ff       	sbrs	r22, 0
 988:	e8 cf       	rjmp	.-48     	; 0x95a <ldexp+0x2e>
 98a:	6f 5f       	subi	r22, 0xFF	; 255
 98c:	7f 4f       	sbci	r23, 0xFF	; 255
 98e:	8f 4f       	sbci	r24, 0xFF	; 255
 990:	9f 4f       	sbci	r25, 0xFF	; 255
 992:	e3 cf       	rjmp	.-58     	; 0x95a <ldexp+0x2e>
 994:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__fp_szero>
 998:	16 f0       	brts	.+4      	; 0x99e <ldexp+0x72>
 99a:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__fp_mpack>
 99e:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_nan>
 9a2:	68 94       	set
 9a4:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_inf>

000009a8 <log>:
 9a8:	0e 94 4b 03 	call	0x696	; 0x696 <__fp_splitA>
 9ac:	a8 f3       	brcs	.-22     	; 0x998 <ldexp+0x6c>
 9ae:	99 23       	and	r25, r25
 9b0:	c1 f3       	breq	.-16     	; 0x9a2 <ldexp+0x76>
 9b2:	ae f3       	brts	.-22     	; 0x99e <ldexp+0x72>
 9b4:	df 93       	push	r29
 9b6:	cf 93       	push	r28
 9b8:	1f 93       	push	r17
 9ba:	0f 93       	push	r16
 9bc:	ff 92       	push	r15
 9be:	c9 2f       	mov	r28, r25
 9c0:	dd 27       	eor	r29, r29
 9c2:	88 23       	and	r24, r24
 9c4:	2a f0       	brmi	.+10     	; 0x9d0 <log+0x28>
 9c6:	21 97       	sbiw	r28, 0x01	; 1
 9c8:	66 0f       	add	r22, r22
 9ca:	77 1f       	adc	r23, r23
 9cc:	88 1f       	adc	r24, r24
 9ce:	da f7       	brpl	.-10     	; 0x9c6 <log+0x1e>
 9d0:	20 e0       	ldi	r18, 0x00	; 0
 9d2:	30 e0       	ldi	r19, 0x00	; 0
 9d4:	40 e8       	ldi	r20, 0x80	; 128
 9d6:	5f eb       	ldi	r21, 0xBF	; 191
 9d8:	9f e3       	ldi	r25, 0x3F	; 63
 9da:	88 39       	cpi	r24, 0x98	; 152
 9dc:	20 f0       	brcs	.+8      	; 0x9e6 <log+0x3e>
 9de:	80 3e       	cpi	r24, 0xE0	; 224
 9e0:	38 f0       	brcs	.+14     	; 0x9f0 <log+0x48>
 9e2:	21 96       	adiw	r28, 0x01	; 1
 9e4:	8f 77       	andi	r24, 0x7F	; 127
 9e6:	0e 94 3c 02 	call	0x478	; 0x478 <__addsf3>
 9ea:	e0 e9       	ldi	r30, 0x90	; 144
 9ec:	f0 e0       	ldi	r31, 0x00	; 0
 9ee:	04 c0       	rjmp	.+8      	; 0x9f8 <log+0x50>
 9f0:	0e 94 3c 02 	call	0x478	; 0x478 <__addsf3>
 9f4:	ed eb       	ldi	r30, 0xBD	; 189
 9f6:	f0 e0       	ldi	r31, 0x00	; 0
 9f8:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__fp_powser>
 9fc:	8b 01       	movw	r16, r22
 9fe:	be 01       	movw	r22, r28
 a00:	ec 01       	movw	r28, r24
 a02:	fb 2e       	mov	r15, r27
 a04:	6f 57       	subi	r22, 0x7F	; 127
 a06:	71 09       	sbc	r23, r1
 a08:	75 95       	asr	r23
 a0a:	77 1f       	adc	r23, r23
 a0c:	88 0b       	sbc	r24, r24
 a0e:	99 0b       	sbc	r25, r25
 a10:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__floatsisf>
 a14:	28 e1       	ldi	r18, 0x18	; 24
 a16:	32 e7       	ldi	r19, 0x72	; 114
 a18:	41 e3       	ldi	r20, 0x31	; 49
 a1a:	5f e3       	ldi	r21, 0x3F	; 63
 a1c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__mulsf3x>
 a20:	af 2d       	mov	r26, r15
 a22:	98 01       	movw	r18, r16
 a24:	ae 01       	movw	r20, r28
 a26:	ff 90       	pop	r15
 a28:	0f 91       	pop	r16
 a2a:	1f 91       	pop	r17
 a2c:	cf 91       	pop	r28
 a2e:	df 91       	pop	r29
 a30:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__addsf3x>
 a34:	0c 94 32 03 	jmp	0x664	; 0x664 <__fp_round>

00000a38 <modf>:
 a38:	fa 01       	movw	r30, r20
 a3a:	dc 01       	movw	r26, r24
 a3c:	aa 0f       	add	r26, r26
 a3e:	bb 1f       	adc	r27, r27
 a40:	9b 01       	movw	r18, r22
 a42:	ac 01       	movw	r20, r24
 a44:	bf 57       	subi	r27, 0x7F	; 127
 a46:	28 f4       	brcc	.+10     	; 0xa52 <modf+0x1a>
 a48:	22 27       	eor	r18, r18
 a4a:	33 27       	eor	r19, r19
 a4c:	44 27       	eor	r20, r20
 a4e:	50 78       	andi	r21, 0x80	; 128
 a50:	20 c0       	rjmp	.+64     	; 0xa92 <modf+0x5a>
 a52:	b7 51       	subi	r27, 0x17	; 23
 a54:	90 f4       	brcc	.+36     	; 0xa7a <modf+0x42>
 a56:	ab 2f       	mov	r26, r27
 a58:	00 24       	eor	r0, r0
 a5a:	46 95       	lsr	r20
 a5c:	37 95       	ror	r19
 a5e:	27 95       	ror	r18
 a60:	01 1c       	adc	r0, r1
 a62:	a3 95       	inc	r26
 a64:	d2 f3       	brmi	.-12     	; 0xa5a <modf+0x22>
 a66:	00 20       	and	r0, r0
 a68:	71 f0       	breq	.+28     	; 0xa86 <modf+0x4e>
 a6a:	22 0f       	add	r18, r18
 a6c:	33 1f       	adc	r19, r19
 a6e:	44 1f       	adc	r20, r20
 a70:	b3 95       	inc	r27
 a72:	da f3       	brmi	.-10     	; 0xa6a <modf+0x32>
 a74:	0e d0       	rcall	.+28     	; 0xa92 <modf+0x5a>
 a76:	0c 94 3b 02 	jmp	0x476	; 0x476 <__subsf3>
 a7a:	61 30       	cpi	r22, 0x01	; 1
 a7c:	71 05       	cpc	r23, r1
 a7e:	a0 e8       	ldi	r26, 0x80	; 128
 a80:	8a 07       	cpc	r24, r26
 a82:	b9 46       	sbci	r27, 0x69	; 105
 a84:	30 f4       	brcc	.+12     	; 0xa92 <modf+0x5a>
 a86:	9b 01       	movw	r18, r22
 a88:	ac 01       	movw	r20, r24
 a8a:	66 27       	eor	r22, r22
 a8c:	77 27       	eor	r23, r23
 a8e:	88 27       	eor	r24, r24
 a90:	90 78       	andi	r25, 0x80	; 128
 a92:	30 96       	adiw	r30, 0x00	; 0
 a94:	21 f0       	breq	.+8      	; 0xa9e <modf+0x66>
 a96:	20 83       	st	Z, r18
 a98:	31 83       	std	Z+1, r19	; 0x01
 a9a:	42 83       	std	Z+2, r20	; 0x02
 a9c:	53 83       	std	Z+3, r21	; 0x03
 a9e:	08 95       	ret

00000aa0 <__divsf3>:
 aa0:	0e 94 64 05 	call	0xac8	; 0xac8 <__divsf3x>
 aa4:	0c 94 32 03 	jmp	0x664	; 0x664 <__fp_round>
 aa8:	0e 94 2b 03 	call	0x656	; 0x656 <__fp_pscB>
 aac:	58 f0       	brcs	.+22     	; 0xac4 <__divsf3+0x24>
 aae:	0e 94 24 03 	call	0x648	; 0x648 <__fp_pscA>
 ab2:	40 f0       	brcs	.+16     	; 0xac4 <__divsf3+0x24>
 ab4:	29 f4       	brne	.+10     	; 0xac0 <__divsf3+0x20>
 ab6:	5f 3f       	cpi	r21, 0xFF	; 255
 ab8:	29 f0       	breq	.+10     	; 0xac4 <__divsf3+0x24>
 aba:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_inf>
 abe:	51 11       	cpse	r21, r1
 ac0:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__fp_szero>
 ac4:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_nan>

00000ac8 <__divsf3x>:
 ac8:	0e 94 43 03 	call	0x686	; 0x686 <__fp_split3>
 acc:	68 f3       	brcs	.-38     	; 0xaa8 <__divsf3+0x8>

00000ace <__divsf3_pse>:
 ace:	99 23       	and	r25, r25
 ad0:	b1 f3       	breq	.-20     	; 0xabe <__divsf3+0x1e>
 ad2:	55 23       	and	r21, r21
 ad4:	91 f3       	breq	.-28     	; 0xaba <__divsf3+0x1a>
 ad6:	95 1b       	sub	r25, r21
 ad8:	55 0b       	sbc	r21, r21
 ada:	bb 27       	eor	r27, r27
 adc:	aa 27       	eor	r26, r26
 ade:	62 17       	cp	r22, r18
 ae0:	73 07       	cpc	r23, r19
 ae2:	84 07       	cpc	r24, r20
 ae4:	38 f0       	brcs	.+14     	; 0xaf4 <__divsf3_pse+0x26>
 ae6:	9f 5f       	subi	r25, 0xFF	; 255
 ae8:	5f 4f       	sbci	r21, 0xFF	; 255
 aea:	22 0f       	add	r18, r18
 aec:	33 1f       	adc	r19, r19
 aee:	44 1f       	adc	r20, r20
 af0:	aa 1f       	adc	r26, r26
 af2:	a9 f3       	breq	.-22     	; 0xade <__divsf3_pse+0x10>
 af4:	35 d0       	rcall	.+106    	; 0xb60 <__divsf3_pse+0x92>
 af6:	0e 2e       	mov	r0, r30
 af8:	3a f0       	brmi	.+14     	; 0xb08 <__divsf3_pse+0x3a>
 afa:	e0 e8       	ldi	r30, 0x80	; 128
 afc:	32 d0       	rcall	.+100    	; 0xb62 <__divsf3_pse+0x94>
 afe:	91 50       	subi	r25, 0x01	; 1
 b00:	50 40       	sbci	r21, 0x00	; 0
 b02:	e6 95       	lsr	r30
 b04:	00 1c       	adc	r0, r0
 b06:	ca f7       	brpl	.-14     	; 0xafa <__divsf3_pse+0x2c>
 b08:	2b d0       	rcall	.+86     	; 0xb60 <__divsf3_pse+0x92>
 b0a:	fe 2f       	mov	r31, r30
 b0c:	29 d0       	rcall	.+82     	; 0xb60 <__divsf3_pse+0x92>
 b0e:	66 0f       	add	r22, r22
 b10:	77 1f       	adc	r23, r23
 b12:	88 1f       	adc	r24, r24
 b14:	bb 1f       	adc	r27, r27
 b16:	26 17       	cp	r18, r22
 b18:	37 07       	cpc	r19, r23
 b1a:	48 07       	cpc	r20, r24
 b1c:	ab 07       	cpc	r26, r27
 b1e:	b0 e8       	ldi	r27, 0x80	; 128
 b20:	09 f0       	breq	.+2      	; 0xb24 <__divsf3_pse+0x56>
 b22:	bb 0b       	sbc	r27, r27
 b24:	80 2d       	mov	r24, r0
 b26:	bf 01       	movw	r22, r30
 b28:	ff 27       	eor	r31, r31
 b2a:	93 58       	subi	r25, 0x83	; 131
 b2c:	5f 4f       	sbci	r21, 0xFF	; 255
 b2e:	3a f0       	brmi	.+14     	; 0xb3e <__divsf3_pse+0x70>
 b30:	9e 3f       	cpi	r25, 0xFE	; 254
 b32:	51 05       	cpc	r21, r1
 b34:	78 f0       	brcs	.+30     	; 0xb54 <__divsf3_pse+0x86>
 b36:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_inf>
 b3a:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__fp_szero>
 b3e:	5f 3f       	cpi	r21, 0xFF	; 255
 b40:	e4 f3       	brlt	.-8      	; 0xb3a <__divsf3_pse+0x6c>
 b42:	98 3e       	cpi	r25, 0xE8	; 232
 b44:	d4 f3       	brlt	.-12     	; 0xb3a <__divsf3_pse+0x6c>
 b46:	86 95       	lsr	r24
 b48:	77 95       	ror	r23
 b4a:	67 95       	ror	r22
 b4c:	b7 95       	ror	r27
 b4e:	f7 95       	ror	r31
 b50:	9f 5f       	subi	r25, 0xFF	; 255
 b52:	c9 f7       	brne	.-14     	; 0xb46 <__divsf3_pse+0x78>
 b54:	88 0f       	add	r24, r24
 b56:	91 1d       	adc	r25, r1
 b58:	96 95       	lsr	r25
 b5a:	87 95       	ror	r24
 b5c:	97 f9       	bld	r25, 7
 b5e:	08 95       	ret
 b60:	e1 e0       	ldi	r30, 0x01	; 1
 b62:	66 0f       	add	r22, r22
 b64:	77 1f       	adc	r23, r23
 b66:	88 1f       	adc	r24, r24
 b68:	bb 1f       	adc	r27, r27
 b6a:	62 17       	cp	r22, r18
 b6c:	73 07       	cpc	r23, r19
 b6e:	84 07       	cpc	r24, r20
 b70:	ba 07       	cpc	r27, r26
 b72:	20 f0       	brcs	.+8      	; 0xb7c <__divsf3_pse+0xae>
 b74:	62 1b       	sub	r22, r18
 b76:	73 0b       	sbc	r23, r19
 b78:	84 0b       	sbc	r24, r20
 b7a:	ba 0b       	sbc	r27, r26
 b7c:	ee 1f       	adc	r30, r30
 b7e:	88 f7       	brcc	.-30     	; 0xb62 <__divsf3_pse+0x94>
 b80:	e0 95       	com	r30
 b82:	08 95       	ret

00000b84 <__fp_mpack>:
 b84:	9f 3f       	cpi	r25, 0xFF	; 255
 b86:	31 f0       	breq	.+12     	; 0xb94 <__fp_mpack_finite+0xc>

00000b88 <__fp_mpack_finite>:
 b88:	91 50       	subi	r25, 0x01	; 1
 b8a:	20 f4       	brcc	.+8      	; 0xb94 <__fp_mpack_finite+0xc>
 b8c:	87 95       	ror	r24
 b8e:	77 95       	ror	r23
 b90:	67 95       	ror	r22
 b92:	b7 95       	ror	r27
 b94:	88 0f       	add	r24, r24
 b96:	91 1d       	adc	r25, r1
 b98:	96 95       	lsr	r25
 b9a:	87 95       	ror	r24
 b9c:	97 f9       	bld	r25, 7
 b9e:	08 95       	ret

00000ba0 <__divmodhi4>:
 ba0:	97 fb       	bst	r25, 7
 ba2:	07 2e       	mov	r0, r23
 ba4:	16 f4       	brtc	.+4      	; 0xbaa <__divmodhi4+0xa>
 ba6:	00 94       	com	r0
 ba8:	07 d0       	rcall	.+14     	; 0xbb8 <__divmodhi4_neg1>
 baa:	77 fd       	sbrc	r23, 7
 bac:	09 d0       	rcall	.+18     	; 0xbc0 <__divmodhi4_neg2>
 bae:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__udivmodhi4>
 bb2:	07 fc       	sbrc	r0, 7
 bb4:	05 d0       	rcall	.+10     	; 0xbc0 <__divmodhi4_neg2>
 bb6:	3e f4       	brtc	.+14     	; 0xbc6 <__divmodhi4_exit>

00000bb8 <__divmodhi4_neg1>:
 bb8:	90 95       	com	r25
 bba:	81 95       	neg	r24
 bbc:	9f 4f       	sbci	r25, 0xFF	; 255
 bbe:	08 95       	ret

00000bc0 <__divmodhi4_neg2>:
 bc0:	70 95       	com	r23
 bc2:	61 95       	neg	r22
 bc4:	7f 4f       	sbci	r23, 0xFF	; 255

00000bc6 <__divmodhi4_exit>:
 bc6:	08 95       	ret

00000bc8 <__udivmodhi4>:
 bc8:	aa 1b       	sub	r26, r26
 bca:	bb 1b       	sub	r27, r27
 bcc:	51 e1       	ldi	r21, 0x11	; 17
 bce:	07 c0       	rjmp	.+14     	; 0xbde <__udivmodhi4_ep>

00000bd0 <__udivmodhi4_loop>:
 bd0:	aa 1f       	adc	r26, r26
 bd2:	bb 1f       	adc	r27, r27
 bd4:	a6 17       	cp	r26, r22
 bd6:	b7 07       	cpc	r27, r23
 bd8:	10 f0       	brcs	.+4      	; 0xbde <__udivmodhi4_ep>
 bda:	a6 1b       	sub	r26, r22
 bdc:	b7 0b       	sbc	r27, r23

00000bde <__udivmodhi4_ep>:
 bde:	88 1f       	adc	r24, r24
 be0:	99 1f       	adc	r25, r25
 be2:	5a 95       	dec	r21
 be4:	a9 f7       	brne	.-22     	; 0xbd0 <__udivmodhi4_loop>
 be6:	80 95       	com	r24
 be8:	90 95       	com	r25
 bea:	bc 01       	movw	r22, r24
 bec:	cd 01       	movw	r24, r26
 bee:	08 95       	ret

00000bf0 <_exit>:
 bf0:	f8 94       	cli

00000bf2 <__stop_program>:
 bf2:	ff cf       	rjmp	.-2      	; 0xbf2 <__stop_program>
