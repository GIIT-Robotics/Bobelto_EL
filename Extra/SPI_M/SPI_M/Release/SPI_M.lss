
SPI_M.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000001a8  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  4 .debug_info   000005f4  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000005a2  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000134  00000000  00000000  00000e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000208  00000000  00000000  00000f7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 32       	cpi	r26, 0x22	; 34
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 76 00 	call	0xec	; 0xec <main>
  9e:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SPI_init>:
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	88 62       	ori	r24, 0x28	; 40
  aa:	84 b9       	out	0x04, r24	; 4
  ac:	24 98       	cbi	0x04, 4	; 4
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	86 60       	ori	r24, 0x06	; 6
  b2:	84 b9       	out	0x04, r24	; 4
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	86 60       	ori	r24, 0x06	; 6
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	8c b5       	in	r24, 0x2c	; 44
  bc:	8f 7d       	andi	r24, 0xDF	; 223
  be:	8c bd       	out	0x2c, r24	; 44
  c0:	8c b5       	in	r24, 0x2c	; 44
  c2:	87 7f       	andi	r24, 0xF7	; 247
  c4:	8c bd       	out	0x2c, r24	; 44
  c6:	8c b5       	in	r24, 0x2c	; 44
  c8:	8b 7f       	andi	r24, 0xFB	; 251
  ca:	8c bd       	out	0x2c, r24	; 44
  cc:	8c b5       	in	r24, 0x2c	; 44
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	8c bd       	out	0x2c, r24	; 44
  d2:	8c b5       	in	r24, 0x2c	; 44
  d4:	8d 7f       	andi	r24, 0xFD	; 253
  d6:	8c bd       	out	0x2c, r24	; 44
  d8:	8d b5       	in	r24, 0x2d	; 45
  da:	8e 7f       	andi	r24, 0xFE	; 254
  dc:	8d bd       	out	0x2d, r24	; 45
  de:	8c b5       	in	r24, 0x2c	; 44
  e0:	80 61       	ori	r24, 0x10	; 16
  e2:	8c bd       	out	0x2c, r24	; 44
  e4:	8c b5       	in	r24, 0x2c	; 44
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	8c bd       	out	0x2c, r24	; 44
  ea:	08 95       	ret

000000ec <main>:
  ec:	0e 94 53 00 	call	0xa6	; 0xa6 <SPI_init>
  f0:	0e 94 a5 00 	call	0x14a	; 0x14a <UART_init>
  f4:	8f e3       	ldi	r24, 0x3F	; 63
  f6:	9c e9       	ldi	r25, 0x9C	; 156
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0xc>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x12>
  fe:	00 00       	nop
 100:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 104:	87 ff       	sbrs	r24, 7
 106:	fc cf       	rjmp	.-8      	; 0x100 <main+0x14>
 108:	0e 94 b6 00 	call	0x16c	; 0x16c <UART_read>
 10c:	c8 2f       	mov	r28, r24
 10e:	0e 94 bf 00 	call	0x17e	; 0x17e <UART_write>
 112:	8a e0       	ldi	r24, 0x0A	; 10
 114:	0e 94 bf 00 	call	0x17e	; 0x17e <UART_write>
 118:	c0 33       	cpi	r28, 0x30	; 48
 11a:	29 f0       	breq	.+10     	; 0x126 <main+0x3a>
 11c:	c1 33       	cpi	r28, 0x31	; 49
 11e:	31 f4       	brne	.+12     	; 0x12c <main+0x40>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	05 c0       	rjmp	.+10     	; 0x130 <main+0x44>
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	02 c0       	rjmp	.+4      	; 0x130 <main+0x44>
 12c:	8b e1       	ldi	r24, 0x1B	; 27
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_write_txt>
 134:	8a e0       	ldi	r24, 0x0A	; 10
 136:	0e 94 bf 00 	call	0x17e	; 0x17e <UART_write>
 13a:	9f ef       	ldi	r25, 0xFF	; 255
 13c:	21 ee       	ldi	r18, 0xE1	; 225
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	91 50       	subi	r25, 0x01	; 1
 142:	20 40       	sbci	r18, 0x00	; 0
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x54>
 148:	d9 cf       	rjmp	.-78     	; 0xfc <main+0x10>

0000014a <UART_init>:
 14a:	51 9a       	sbi	0x0a, 1	; 10
 14c:	50 98       	cbi	0x0a, 0	; 10
 14e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 152:	88 e9       	ldi	r24, 0x98	; 152
 154:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 15e:	87 e6       	ldi	r24, 0x67	; 103
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 166:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 16a:	08 95       	ret

0000016c <UART_read>:
 16c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 170:	87 ff       	sbrs	r24, 7
 172:	03 c0       	rjmp	.+6      	; 0x17a <UART_read+0xe>
 174:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 178:	08 95       	ret
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	08 95       	ret

0000017e <UART_write>:
 17e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 182:	95 ff       	sbrs	r25, 5
 184:	fc cf       	rjmp	.-8      	; 0x17e <UART_write>
 186:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 18a:	08 95       	ret

0000018c <UART_write_txt>:
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	ec 01       	movw	r28, r24
 192:	89 91       	ld	r24, Y+
 194:	88 23       	and	r24, r24
 196:	19 f0       	breq	.+6      	; 0x19e <UART_write_txt+0x12>
 198:	0e 94 bf 00 	call	0x17e	; 0x17e <UART_write>
 19c:	fa cf       	rjmp	.-12     	; 0x192 <UART_write_txt+0x6>
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
