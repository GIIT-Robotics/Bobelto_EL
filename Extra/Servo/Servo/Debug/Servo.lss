
Servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000925  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076f  00000000  00000000  00000cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000438  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  0000185c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ee  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c3  00000000  00000000  00001cea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001ead  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 23 01 	jmp	0x246	; 0x246 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

#include "PWM/PWM.h"

int main(void)
{
	cli();
  90:	f8 94       	cli
	PWM_init(100);	// Encendemos el PWM con una freq de 50 Hz (20 ms)
  92:	84 e6       	ldi	r24, 0x64	; 100
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 79 00 	call	0xf2	; 0xf2 <PWM_init>
	sei();
  9a:	78 94       	sei
	
	
	
    while (1) 
    {
		for(int i=10;i<20;i++)
  9c:	ca e0       	ldi	r28, 0x0A	; 10
  9e:	d0 e0       	ldi	r29, 0x00	; 0
  a0:	0f c0       	rjmp	.+30     	; 0xc0 <main+0x30>
		{
			PWM_setDutyA(i);
  a2:	ce 01       	movw	r24, r28
  a4:	0e 94 af 00 	call	0x15e	; 0x15e <PWM_setDutyA>
			PWM_on();
  a8:	0e 94 9f 00 	call	0x13e	; 0x13e <PWM_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	81 ee       	ldi	r24, 0xE1	; 225
  b0:	94 e0       	ldi	r25, 0x04	; 4
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x22>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x2c>
  bc:	00 00       	nop
	
	
	
    while (1) 
    {
		for(int i=10;i<20;i++)
  be:	21 96       	adiw	r28, 0x01	; 1
  c0:	c4 31       	cpi	r28, 0x14	; 20
  c2:	d1 05       	cpc	r29, r1
  c4:	74 f3       	brlt	.-36     	; 0xa2 <main+0x12>
  c6:	c4 e1       	ldi	r28, 0x14	; 20
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	0f c0       	rjmp	.+30     	; 0xea <main+0x5a>
			_delay_ms(100);
		}
		
		for(int i=20;i>10;i--)
		{
			PWM_setDutyA(i);
  cc:	ce 01       	movw	r24, r28
  ce:	0e 94 af 00 	call	0x15e	; 0x15e <PWM_setDutyA>
			PWM_on();
  d2:	0e 94 9f 00 	call	0x13e	; 0x13e <PWM_on>
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	81 ee       	ldi	r24, 0xE1	; 225
  da:	94 e0       	ldi	r25, 0x04	; 4
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x4c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x56>
  e6:	00 00       	nop
			PWM_setDutyA(i);
			PWM_on();
			_delay_ms(100);
		}
		
		for(int i=20;i>10;i--)
  e8:	21 97       	sbiw	r28, 0x01	; 1
  ea:	cb 30       	cpi	r28, 0x0B	; 11
  ec:	d1 05       	cpc	r29, r1
  ee:	74 f7       	brge	.-36     	; 0xcc <main+0x3c>
  f0:	d5 cf       	rjmp	.-86     	; 0x9c <main+0xc>

000000f2 <PWM_init>:
void PWM_off()
{
	//Clock setting T1clock = 0 Hz
	TCCR1B &=~ (1<<CS10);
	TCCR1B &=~ (1<<CS11);
	TCCR1B &=~ (1<<CS12);
  f2:	9c 01       	movw	r18, r24
  f4:	e0 e8       	ldi	r30, 0x80	; 128
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8e 7f       	andi	r24, 0xFE	; 254
  fc:	80 83       	st	Z, r24
  fe:	80 81       	ld	r24, Z
 100:	82 60       	ori	r24, 0x02	; 2
 102:	80 83       	st	Z, r24
 104:	e1 e8       	ldi	r30, 0x81	; 129
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	88 60       	ori	r24, 0x08	; 8
 10c:	80 83       	st	Z, r24
 10e:	80 81       	ld	r24, Z
 110:	80 61       	ori	r24, 0x10	; 16
 112:	80 83       	st	Z, r24
 114:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 118:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 11c:	03 2e       	mov	r0, r19
 11e:	00 0c       	add	r0, r0
 120:	44 0b       	sbc	r20, r20
 122:	55 0b       	sbc	r21, r21
 124:	69 e0       	ldi	r22, 0x09	; 9
 126:	7d e3       	ldi	r23, 0x3D	; 61
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 df 00 	call	0x1be	; 0x1be <__udivmodsi4>
 130:	21 50       	subi	r18, 0x01	; 1
 132:	31 09       	sbc	r19, r1
 134:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 138:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 13c:	08 95       	ret

0000013e <PWM_on>:
 13e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 142:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 146:	e1 e8       	ldi	r30, 0x81	; 129
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	80 83       	st	Z, r24
 150:	80 81       	ld	r24, Z
 152:	8d 7f       	andi	r24, 0xFD	; 253
 154:	80 83       	st	Z, r24
 156:	80 81       	ld	r24, Z
 158:	84 60       	ori	r24, 0x04	; 4
 15a:	80 83       	st	Z, r24
 15c:	08 95       	ret

0000015e <PWM_setDutyA>:
}

void PWM_setDutyA(int duty)
{
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	ec 01       	movw	r28, r24
	//Pin configuration
	DDRB |= (1<<DDB1);
 164:	84 b1       	in	r24, 0x04	; 4
 166:	82 60       	ori	r24, 0x02	; 2
 168:	84 b9       	out	0x04, r24	; 4
	
	//Output active
	TCCR1A &=~ (1<<COM1A0);
 16a:	e0 e8       	ldi	r30, 0x80	; 128
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	8f 7b       	andi	r24, 0xBF	; 191
 172:	80 83       	st	Z, r24
	TCCR1A |=  (1<<COM1A1);
 174:	80 81       	ld	r24, Z
 176:	80 68       	ori	r24, 0x80	; 128
 178:	80 83       	st	Z, r24

	OCR1A = (((F_CPU/1024/_freq) - 1)*duty)/100;
 17a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 182:	03 2e       	mov	r0, r19
 184:	00 0c       	add	r0, r0
 186:	44 0b       	sbc	r20, r20
 188:	55 0b       	sbc	r21, r21
 18a:	69 e0       	ldi	r22, 0x09	; 9
 18c:	7d e3       	ldi	r23, 0x3D	; 61
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 df 00 	call	0x1be	; 0x1be <__udivmodsi4>
 196:	21 50       	subi	r18, 0x01	; 1
 198:	31 09       	sbc	r19, r1
 19a:	41 09       	sbc	r20, r1
 19c:	51 09       	sbc	r21, r1
 19e:	de 01       	movw	r26, r28
 1a0:	0e 94 01 01 	call	0x202	; 0x202 <__mulshisi3>
 1a4:	24 e6       	ldi	r18, 0x64	; 100
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	50 e0       	ldi	r21, 0x00	; 0
 1ac:	0e 94 df 00 	call	0x1be	; 0x1be <__udivmodsi4>
 1b0:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1b4:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <__udivmodsi4>:
 1be:	a1 e2       	ldi	r26, 0x21	; 33
 1c0:	1a 2e       	mov	r1, r26
 1c2:	aa 1b       	sub	r26, r26
 1c4:	bb 1b       	sub	r27, r27
 1c6:	fd 01       	movw	r30, r26
 1c8:	0d c0       	rjmp	.+26     	; 0x1e4 <__udivmodsi4_ep>

000001ca <__udivmodsi4_loop>:
 1ca:	aa 1f       	adc	r26, r26
 1cc:	bb 1f       	adc	r27, r27
 1ce:	ee 1f       	adc	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	a2 17       	cp	r26, r18
 1d4:	b3 07       	cpc	r27, r19
 1d6:	e4 07       	cpc	r30, r20
 1d8:	f5 07       	cpc	r31, r21
 1da:	20 f0       	brcs	.+8      	; 0x1e4 <__udivmodsi4_ep>
 1dc:	a2 1b       	sub	r26, r18
 1de:	b3 0b       	sbc	r27, r19
 1e0:	e4 0b       	sbc	r30, r20
 1e2:	f5 0b       	sbc	r31, r21

000001e4 <__udivmodsi4_ep>:
 1e4:	66 1f       	adc	r22, r22
 1e6:	77 1f       	adc	r23, r23
 1e8:	88 1f       	adc	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	1a 94       	dec	r1
 1ee:	69 f7       	brne	.-38     	; 0x1ca <__udivmodsi4_loop>
 1f0:	60 95       	com	r22
 1f2:	70 95       	com	r23
 1f4:	80 95       	com	r24
 1f6:	90 95       	com	r25
 1f8:	9b 01       	movw	r18, r22
 1fa:	ac 01       	movw	r20, r24
 1fc:	bd 01       	movw	r22, r26
 1fe:	cf 01       	movw	r24, r30
 200:	08 95       	ret

00000202 <__mulshisi3>:
 202:	b7 ff       	sbrs	r27, 7
 204:	0c 94 09 01 	jmp	0x212	; 0x212 <__muluhisi3>

00000208 <__mulohisi3>:
 208:	0e 94 09 01 	call	0x212	; 0x212 <__muluhisi3>
 20c:	82 1b       	sub	r24, r18
 20e:	93 0b       	sbc	r25, r19
 210:	08 95       	ret

00000212 <__muluhisi3>:
 212:	0e 94 14 01 	call	0x228	; 0x228 <__umulhisi3>
 216:	a5 9f       	mul	r26, r21
 218:	90 0d       	add	r25, r0
 21a:	b4 9f       	mul	r27, r20
 21c:	90 0d       	add	r25, r0
 21e:	a4 9f       	mul	r26, r20
 220:	80 0d       	add	r24, r0
 222:	91 1d       	adc	r25, r1
 224:	11 24       	eor	r1, r1
 226:	08 95       	ret

00000228 <__umulhisi3>:
 228:	a2 9f       	mul	r26, r18
 22a:	b0 01       	movw	r22, r0
 22c:	b3 9f       	mul	r27, r19
 22e:	c0 01       	movw	r24, r0
 230:	a3 9f       	mul	r26, r19
 232:	70 0d       	add	r23, r0
 234:	81 1d       	adc	r24, r1
 236:	11 24       	eor	r1, r1
 238:	91 1d       	adc	r25, r1
 23a:	b2 9f       	mul	r27, r18
 23c:	70 0d       	add	r23, r0
 23e:	81 1d       	adc	r24, r1
 240:	11 24       	eor	r1, r1
 242:	91 1d       	adc	r25, r1
 244:	08 95       	ret

00000246 <_exit>:
 246:	f8 94       	cli

00000248 <__stop_program>:
 248:	ff cf       	rjmp	.-2      	; 0x248 <__stop_program>
