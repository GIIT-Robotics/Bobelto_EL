
LM335.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000502  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000502  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000534  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c4  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a8  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000040b  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001a34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d6  00000000  00000000  00001a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f4  00000000  00000000  00001e62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001f56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 80 00 	call	0x100	; 0x100 <main>
  78:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ADC_init>:
#include "ADC.h"

void ADC_init()
{
	// Output right
	ADMUX &=~ (1<<ADLAR);
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	8f 7d       	andi	r24, 0xDF	; 223
  88:	80 83       	st	Z, r24
	
	// Voltage Reference
	ADMUX |= (1<<REFS0);
  8a:	80 81       	ld	r24, Z
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	80 83       	st	Z, r24
	ADMUX &=~ (1<<REFS1);
  90:	80 81       	ld	r24, Z
  92:	8f 77       	andi	r24, 0x7F	; 127
  94:	80 83       	st	Z, r24
	
	// Freq divisor
	ADCSRA |= (1<<ADPS0);
  96:	ea e7       	ldi	r30, 0x7A	; 122
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS1);
  a0:	80 81       	ld	r24, Z
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2);
  a6:	80 81       	ld	r24, Z
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	80 83       	st	Z, r24
  ac:	08 95       	ret

000000ae <ADC_GetData>:
}

float ADC_GetData(int canal)
{
	// Selección del canal de l ADC //
	ADMUX &=~  0x0F;
  ae:	ec e7       	ldi	r30, 0x7C	; 124
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	90 81       	ld	r25, Z
  b4:	90 7f       	andi	r25, 0xF0	; 240
  b6:	90 83       	st	Z, r25
	ADMUX |=  canal;
  b8:	90 81       	ld	r25, Z
  ba:	89 2b       	or	r24, r25
  bc:	80 83       	st	Z, r24
	
	// Encendemos en ADC
	ADCSRA |= (1<<ADEN);
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	8a 95       	dec	r24
  cc:	f1 f7       	brne	.-4      	; 0xca <ADC_GetData+0x1c>
  ce:	00 00       	nop
	_delay_us(10);	// Esperamos a que caliente

	// Mandamos el muestreo
	ADCSRA |= (1<<ADSC);
  d0:	80 81       	ld	r24, Z
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	80 83       	st	Z, r24

	// Esperamos a que muestree, leyendo el flag
	while( !(ADCSRA & (1<<ADIF)) );
  d6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  da:	84 ff       	sbrs	r24, 4
  dc:	fc cf       	rjmp	.-8      	; 0xd6 <ADC_GetData+0x28>
	ADCSRA |= (1<<ADIF);	// Reiniciamos el flag
  de:	ea e7       	ldi	r30, 0x7A	; 122
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 61       	ori	r24, 0x10	; 16
  e6:	80 83       	st	Z, r24

	// Apagamos el ADC
	ADCSRA &=~ (1<<ADEN);
  e8:	80 81       	ld	r24, Z
  ea:	8f 77       	andi	r24, 0x7F	; 127
  ec:	80 83       	st	Z, r24

	return ADC;
  ee:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  f2:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 36 01 	call	0x26c	; 0x26c <__floatunsisf>
  fe:	08 95       	ret

00000100 <main>:

#include "ADC/ADC.h"

int main(void)
{
    cli();
 100:	f8 94       	cli
    
    DDRC |= (1<<DDC0);
 102:	87 b1       	in	r24, 0x07	; 7
 104:	81 60       	ori	r24, 0x01	; 1
 106:	87 b9       	out	0x07, r24	; 7
    DDRB |= (1<<DDB5);
 108:	84 b1       	in	r24, 0x04	; 4
 10a:	80 62       	ori	r24, 0x20	; 32
 10c:	84 b9       	out	0x04, r24	; 4
    
    ADC_init();
 10e:	0e 94 40 00 	call	0x80	; 0x80 <ADC_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	8f e3       	ldi	r24, 0x3F	; 63
 114:	9c e9       	ldi	r25, 0x9C	; 156
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x16>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x1c>
 11c:	00 00       	nop
    
    _delay_ms(10);
    
    sei();
 11e:	78 94       	sei
			
	while (1) 
    {
	    float adcV = ADC_GetData(0)*5.0f/1024.0f;
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 57 00 	call	0xae	; 0xae <ADC_GetData>
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	40 ea       	ldi	r20, 0xA0	; 160
 12e:	50 e4       	ldi	r21, 0x40	; 64
 130:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__mulsf3>
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	40 e8       	ldi	r20, 0x80	; 128
 13a:	5a e3       	ldi	r21, 0x3A	; 58
 13c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__mulsf3>
	    float t_K = adcV * 0.004882812 * 100;
 140:	2f ef       	ldi	r18, 0xFF	; 255
 142:	3f ef       	ldi	r19, 0xFF	; 255
 144:	4f e9       	ldi	r20, 0x9F	; 159
 146:	5b e3       	ldi	r21, 0x3B	; 59
 148:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__mulsf3>
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	48 ec       	ldi	r20, 0xC8	; 200
 152:	52 e4       	ldi	r21, 0x42	; 66
 154:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__mulsf3>
		float t_C = t_K - 2.5 - 273.15;
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	40 e2       	ldi	r20, 0x20	; 32
 15e:	50 e4       	ldi	r21, 0x40	; 64
 160:	0e 94 c4 00 	call	0x188	; 0x188 <__subsf3>
 164:	23 e3       	ldi	r18, 0x33	; 51
 166:	33 e9       	ldi	r19, 0x93	; 147
 168:	48 e8       	ldi	r20, 0x88	; 136
 16a:	53 e4       	ldi	r21, 0x43	; 67
 16c:	0e 94 c4 00 	call	0x188	; 0x188 <__subsf3>
	    
		if (t_C < 20.0)
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	40 ea       	ldi	r20, 0xA0	; 160
 176:	51 e4       	ldi	r21, 0x41	; 65
 178:	0e 94 31 01 	call	0x262	; 0x262 <__cmpsf2>
 17c:	88 23       	and	r24, r24
 17e:	84 f6       	brge	.-96     	; 0x120 <main+0x20>
		{
			PORTB |= (1<<PORTB5);
 180:	85 b1       	in	r24, 0x05	; 5
 182:	80 62       	ori	r24, 0x20	; 32
 184:	85 b9       	out	0x05, r24	; 5
 186:	cc cf       	rjmp	.-104    	; 0x120 <main+0x20>

00000188 <__subsf3>:
 188:	50 58       	subi	r21, 0x80	; 128

0000018a <__addsf3>:
 18a:	bb 27       	eor	r27, r27
 18c:	aa 27       	eor	r26, r26
 18e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <__addsf3x>
 192:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__fp_round>
 196:	0e 94 a0 01 	call	0x340	; 0x340 <__fp_pscA>
 19a:	38 f0       	brcs	.+14     	; 0x1aa <__addsf3+0x20>
 19c:	0e 94 a7 01 	call	0x34e	; 0x34e <__fp_pscB>
 1a0:	20 f0       	brcs	.+8      	; 0x1aa <__addsf3+0x20>
 1a2:	39 f4       	brne	.+14     	; 0x1b2 <__addsf3+0x28>
 1a4:	9f 3f       	cpi	r25, 0xFF	; 255
 1a6:	19 f4       	brne	.+6      	; 0x1ae <__addsf3+0x24>
 1a8:	26 f4       	brtc	.+8      	; 0x1b2 <__addsf3+0x28>
 1aa:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__fp_nan>
 1ae:	0e f4       	brtc	.+2      	; 0x1b2 <__addsf3+0x28>
 1b0:	e0 95       	com	r30
 1b2:	e7 fb       	bst	r30, 7
 1b4:	0c 94 97 01 	jmp	0x32e	; 0x32e <__fp_inf>

000001b8 <__addsf3x>:
 1b8:	e9 2f       	mov	r30, r25
 1ba:	0e 94 bf 01 	call	0x37e	; 0x37e <__fp_split3>
 1be:	58 f3       	brcs	.-42     	; 0x196 <__addsf3+0xc>
 1c0:	ba 17       	cp	r27, r26
 1c2:	62 07       	cpc	r22, r18
 1c4:	73 07       	cpc	r23, r19
 1c6:	84 07       	cpc	r24, r20
 1c8:	95 07       	cpc	r25, r21
 1ca:	20 f0       	brcs	.+8      	; 0x1d4 <__addsf3x+0x1c>
 1cc:	79 f4       	brne	.+30     	; 0x1ec <__addsf3x+0x34>
 1ce:	a6 f5       	brtc	.+104    	; 0x238 <__addsf3x+0x80>
 1d0:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__fp_zero>
 1d4:	0e f4       	brtc	.+2      	; 0x1d8 <__addsf3x+0x20>
 1d6:	e0 95       	com	r30
 1d8:	0b 2e       	mov	r0, r27
 1da:	ba 2f       	mov	r27, r26
 1dc:	a0 2d       	mov	r26, r0
 1de:	0b 01       	movw	r0, r22
 1e0:	b9 01       	movw	r22, r18
 1e2:	90 01       	movw	r18, r0
 1e4:	0c 01       	movw	r0, r24
 1e6:	ca 01       	movw	r24, r20
 1e8:	a0 01       	movw	r20, r0
 1ea:	11 24       	eor	r1, r1
 1ec:	ff 27       	eor	r31, r31
 1ee:	59 1b       	sub	r21, r25
 1f0:	99 f0       	breq	.+38     	; 0x218 <__addsf3x+0x60>
 1f2:	59 3f       	cpi	r21, 0xF9	; 249
 1f4:	50 f4       	brcc	.+20     	; 0x20a <__addsf3x+0x52>
 1f6:	50 3e       	cpi	r21, 0xE0	; 224
 1f8:	68 f1       	brcs	.+90     	; 0x254 <__addsf3x+0x9c>
 1fa:	1a 16       	cp	r1, r26
 1fc:	f0 40       	sbci	r31, 0x00	; 0
 1fe:	a2 2f       	mov	r26, r18
 200:	23 2f       	mov	r18, r19
 202:	34 2f       	mov	r19, r20
 204:	44 27       	eor	r20, r20
 206:	58 5f       	subi	r21, 0xF8	; 248
 208:	f3 cf       	rjmp	.-26     	; 0x1f0 <__addsf3x+0x38>
 20a:	46 95       	lsr	r20
 20c:	37 95       	ror	r19
 20e:	27 95       	ror	r18
 210:	a7 95       	ror	r26
 212:	f0 40       	sbci	r31, 0x00	; 0
 214:	53 95       	inc	r21
 216:	c9 f7       	brne	.-14     	; 0x20a <__addsf3x+0x52>
 218:	7e f4       	brtc	.+30     	; 0x238 <__addsf3x+0x80>
 21a:	1f 16       	cp	r1, r31
 21c:	ba 0b       	sbc	r27, r26
 21e:	62 0b       	sbc	r22, r18
 220:	73 0b       	sbc	r23, r19
 222:	84 0b       	sbc	r24, r20
 224:	ba f0       	brmi	.+46     	; 0x254 <__addsf3x+0x9c>
 226:	91 50       	subi	r25, 0x01	; 1
 228:	a1 f0       	breq	.+40     	; 0x252 <__addsf3x+0x9a>
 22a:	ff 0f       	add	r31, r31
 22c:	bb 1f       	adc	r27, r27
 22e:	66 1f       	adc	r22, r22
 230:	77 1f       	adc	r23, r23
 232:	88 1f       	adc	r24, r24
 234:	c2 f7       	brpl	.-16     	; 0x226 <__addsf3x+0x6e>
 236:	0e c0       	rjmp	.+28     	; 0x254 <__addsf3x+0x9c>
 238:	ba 0f       	add	r27, r26
 23a:	62 1f       	adc	r22, r18
 23c:	73 1f       	adc	r23, r19
 23e:	84 1f       	adc	r24, r20
 240:	48 f4       	brcc	.+18     	; 0x254 <__addsf3x+0x9c>
 242:	87 95       	ror	r24
 244:	77 95       	ror	r23
 246:	67 95       	ror	r22
 248:	b7 95       	ror	r27
 24a:	f7 95       	ror	r31
 24c:	9e 3f       	cpi	r25, 0xFE	; 254
 24e:	08 f0       	brcs	.+2      	; 0x252 <__addsf3x+0x9a>
 250:	b0 cf       	rjmp	.-160    	; 0x1b2 <__addsf3+0x28>
 252:	93 95       	inc	r25
 254:	88 0f       	add	r24, r24
 256:	08 f0       	brcs	.+2      	; 0x25a <__addsf3x+0xa2>
 258:	99 27       	eor	r25, r25
 25a:	ee 0f       	add	r30, r30
 25c:	97 95       	ror	r25
 25e:	87 95       	ror	r24
 260:	08 95       	ret

00000262 <__cmpsf2>:
 262:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__fp_cmp>
 266:	08 f4       	brcc	.+2      	; 0x26a <__cmpsf2+0x8>
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	08 95       	ret

0000026c <__floatunsisf>:
 26c:	e8 94       	clt
 26e:	09 c0       	rjmp	.+18     	; 0x282 <__floatsisf+0x12>

00000270 <__floatsisf>:
 270:	97 fb       	bst	r25, 7
 272:	3e f4       	brtc	.+14     	; 0x282 <__floatsisf+0x12>
 274:	90 95       	com	r25
 276:	80 95       	com	r24
 278:	70 95       	com	r23
 27a:	61 95       	neg	r22
 27c:	7f 4f       	sbci	r23, 0xFF	; 255
 27e:	8f 4f       	sbci	r24, 0xFF	; 255
 280:	9f 4f       	sbci	r25, 0xFF	; 255
 282:	99 23       	and	r25, r25
 284:	a9 f0       	breq	.+42     	; 0x2b0 <__floatsisf+0x40>
 286:	f9 2f       	mov	r31, r25
 288:	96 e9       	ldi	r25, 0x96	; 150
 28a:	bb 27       	eor	r27, r27
 28c:	93 95       	inc	r25
 28e:	f6 95       	lsr	r31
 290:	87 95       	ror	r24
 292:	77 95       	ror	r23
 294:	67 95       	ror	r22
 296:	b7 95       	ror	r27
 298:	f1 11       	cpse	r31, r1
 29a:	f8 cf       	rjmp	.-16     	; 0x28c <__floatsisf+0x1c>
 29c:	fa f4       	brpl	.+62     	; 0x2dc <__floatsisf+0x6c>
 29e:	bb 0f       	add	r27, r27
 2a0:	11 f4       	brne	.+4      	; 0x2a6 <__floatsisf+0x36>
 2a2:	60 ff       	sbrs	r22, 0
 2a4:	1b c0       	rjmp	.+54     	; 0x2dc <__floatsisf+0x6c>
 2a6:	6f 5f       	subi	r22, 0xFF	; 255
 2a8:	7f 4f       	sbci	r23, 0xFF	; 255
 2aa:	8f 4f       	sbci	r24, 0xFF	; 255
 2ac:	9f 4f       	sbci	r25, 0xFF	; 255
 2ae:	16 c0       	rjmp	.+44     	; 0x2dc <__floatsisf+0x6c>
 2b0:	88 23       	and	r24, r24
 2b2:	11 f0       	breq	.+4      	; 0x2b8 <__floatsisf+0x48>
 2b4:	96 e9       	ldi	r25, 0x96	; 150
 2b6:	11 c0       	rjmp	.+34     	; 0x2da <__floatsisf+0x6a>
 2b8:	77 23       	and	r23, r23
 2ba:	21 f0       	breq	.+8      	; 0x2c4 <__floatsisf+0x54>
 2bc:	9e e8       	ldi	r25, 0x8E	; 142
 2be:	87 2f       	mov	r24, r23
 2c0:	76 2f       	mov	r23, r22
 2c2:	05 c0       	rjmp	.+10     	; 0x2ce <__floatsisf+0x5e>
 2c4:	66 23       	and	r22, r22
 2c6:	71 f0       	breq	.+28     	; 0x2e4 <__floatsisf+0x74>
 2c8:	96 e8       	ldi	r25, 0x86	; 134
 2ca:	86 2f       	mov	r24, r22
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	2a f0       	brmi	.+10     	; 0x2dc <__floatsisf+0x6c>
 2d2:	9a 95       	dec	r25
 2d4:	66 0f       	add	r22, r22
 2d6:	77 1f       	adc	r23, r23
 2d8:	88 1f       	adc	r24, r24
 2da:	da f7       	brpl	.-10     	; 0x2d2 <__floatsisf+0x62>
 2dc:	88 0f       	add	r24, r24
 2de:	96 95       	lsr	r25
 2e0:	87 95       	ror	r24
 2e2:	97 f9       	bld	r25, 7
 2e4:	08 95       	ret

000002e6 <__fp_cmp>:
 2e6:	99 0f       	add	r25, r25
 2e8:	00 08       	sbc	r0, r0
 2ea:	55 0f       	add	r21, r21
 2ec:	aa 0b       	sbc	r26, r26
 2ee:	e0 e8       	ldi	r30, 0x80	; 128
 2f0:	fe ef       	ldi	r31, 0xFE	; 254
 2f2:	16 16       	cp	r1, r22
 2f4:	17 06       	cpc	r1, r23
 2f6:	e8 07       	cpc	r30, r24
 2f8:	f9 07       	cpc	r31, r25
 2fa:	c0 f0       	brcs	.+48     	; 0x32c <__fp_cmp+0x46>
 2fc:	12 16       	cp	r1, r18
 2fe:	13 06       	cpc	r1, r19
 300:	e4 07       	cpc	r30, r20
 302:	f5 07       	cpc	r31, r21
 304:	98 f0       	brcs	.+38     	; 0x32c <__fp_cmp+0x46>
 306:	62 1b       	sub	r22, r18
 308:	73 0b       	sbc	r23, r19
 30a:	84 0b       	sbc	r24, r20
 30c:	95 0b       	sbc	r25, r21
 30e:	39 f4       	brne	.+14     	; 0x31e <__fp_cmp+0x38>
 310:	0a 26       	eor	r0, r26
 312:	61 f0       	breq	.+24     	; 0x32c <__fp_cmp+0x46>
 314:	23 2b       	or	r18, r19
 316:	24 2b       	or	r18, r20
 318:	25 2b       	or	r18, r21
 31a:	21 f4       	brne	.+8      	; 0x324 <__fp_cmp+0x3e>
 31c:	08 95       	ret
 31e:	0a 26       	eor	r0, r26
 320:	09 f4       	brne	.+2      	; 0x324 <__fp_cmp+0x3e>
 322:	a1 40       	sbci	r26, 0x01	; 1
 324:	a6 95       	lsr	r26
 326:	8f ef       	ldi	r24, 0xFF	; 255
 328:	81 1d       	adc	r24, r1
 32a:	81 1d       	adc	r24, r1
 32c:	08 95       	ret

0000032e <__fp_inf>:
 32e:	97 f9       	bld	r25, 7
 330:	9f 67       	ori	r25, 0x7F	; 127
 332:	80 e8       	ldi	r24, 0x80	; 128
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	08 95       	ret

0000033a <__fp_nan>:
 33a:	9f ef       	ldi	r25, 0xFF	; 255
 33c:	80 ec       	ldi	r24, 0xC0	; 192
 33e:	08 95       	ret

00000340 <__fp_pscA>:
 340:	00 24       	eor	r0, r0
 342:	0a 94       	dec	r0
 344:	16 16       	cp	r1, r22
 346:	17 06       	cpc	r1, r23
 348:	18 06       	cpc	r1, r24
 34a:	09 06       	cpc	r0, r25
 34c:	08 95       	ret

0000034e <__fp_pscB>:
 34e:	00 24       	eor	r0, r0
 350:	0a 94       	dec	r0
 352:	12 16       	cp	r1, r18
 354:	13 06       	cpc	r1, r19
 356:	14 06       	cpc	r1, r20
 358:	05 06       	cpc	r0, r21
 35a:	08 95       	ret

0000035c <__fp_round>:
 35c:	09 2e       	mov	r0, r25
 35e:	03 94       	inc	r0
 360:	00 0c       	add	r0, r0
 362:	11 f4       	brne	.+4      	; 0x368 <__fp_round+0xc>
 364:	88 23       	and	r24, r24
 366:	52 f0       	brmi	.+20     	; 0x37c <__fp_round+0x20>
 368:	bb 0f       	add	r27, r27
 36a:	40 f4       	brcc	.+16     	; 0x37c <__fp_round+0x20>
 36c:	bf 2b       	or	r27, r31
 36e:	11 f4       	brne	.+4      	; 0x374 <__fp_round+0x18>
 370:	60 ff       	sbrs	r22, 0
 372:	04 c0       	rjmp	.+8      	; 0x37c <__fp_round+0x20>
 374:	6f 5f       	subi	r22, 0xFF	; 255
 376:	7f 4f       	sbci	r23, 0xFF	; 255
 378:	8f 4f       	sbci	r24, 0xFF	; 255
 37a:	9f 4f       	sbci	r25, 0xFF	; 255
 37c:	08 95       	ret

0000037e <__fp_split3>:
 37e:	57 fd       	sbrc	r21, 7
 380:	90 58       	subi	r25, 0x80	; 128
 382:	44 0f       	add	r20, r20
 384:	55 1f       	adc	r21, r21
 386:	59 f0       	breq	.+22     	; 0x39e <__fp_splitA+0x10>
 388:	5f 3f       	cpi	r21, 0xFF	; 255
 38a:	71 f0       	breq	.+28     	; 0x3a8 <__fp_splitA+0x1a>
 38c:	47 95       	ror	r20

0000038e <__fp_splitA>:
 38e:	88 0f       	add	r24, r24
 390:	97 fb       	bst	r25, 7
 392:	99 1f       	adc	r25, r25
 394:	61 f0       	breq	.+24     	; 0x3ae <__fp_splitA+0x20>
 396:	9f 3f       	cpi	r25, 0xFF	; 255
 398:	79 f0       	breq	.+30     	; 0x3b8 <__fp_splitA+0x2a>
 39a:	87 95       	ror	r24
 39c:	08 95       	ret
 39e:	12 16       	cp	r1, r18
 3a0:	13 06       	cpc	r1, r19
 3a2:	14 06       	cpc	r1, r20
 3a4:	55 1f       	adc	r21, r21
 3a6:	f2 cf       	rjmp	.-28     	; 0x38c <__fp_split3+0xe>
 3a8:	46 95       	lsr	r20
 3aa:	f1 df       	rcall	.-30     	; 0x38e <__fp_splitA>
 3ac:	08 c0       	rjmp	.+16     	; 0x3be <__fp_splitA+0x30>
 3ae:	16 16       	cp	r1, r22
 3b0:	17 06       	cpc	r1, r23
 3b2:	18 06       	cpc	r1, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	f1 cf       	rjmp	.-30     	; 0x39a <__fp_splitA+0xc>
 3b8:	86 95       	lsr	r24
 3ba:	71 05       	cpc	r23, r1
 3bc:	61 05       	cpc	r22, r1
 3be:	08 94       	sec
 3c0:	08 95       	ret

000003c2 <__fp_zero>:
 3c2:	e8 94       	clt

000003c4 <__fp_szero>:
 3c4:	bb 27       	eor	r27, r27
 3c6:	66 27       	eor	r22, r22
 3c8:	77 27       	eor	r23, r23
 3ca:	cb 01       	movw	r24, r22
 3cc:	97 f9       	bld	r25, 7
 3ce:	08 95       	ret

000003d0 <__mulsf3>:
 3d0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__mulsf3x>
 3d4:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__fp_round>
 3d8:	0e 94 a0 01 	call	0x340	; 0x340 <__fp_pscA>
 3dc:	38 f0       	brcs	.+14     	; 0x3ec <__mulsf3+0x1c>
 3de:	0e 94 a7 01 	call	0x34e	; 0x34e <__fp_pscB>
 3e2:	20 f0       	brcs	.+8      	; 0x3ec <__mulsf3+0x1c>
 3e4:	95 23       	and	r25, r21
 3e6:	11 f0       	breq	.+4      	; 0x3ec <__mulsf3+0x1c>
 3e8:	0c 94 97 01 	jmp	0x32e	; 0x32e <__fp_inf>
 3ec:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__fp_nan>
 3f0:	11 24       	eor	r1, r1
 3f2:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__fp_szero>

000003f6 <__mulsf3x>:
 3f6:	0e 94 bf 01 	call	0x37e	; 0x37e <__fp_split3>
 3fa:	70 f3       	brcs	.-36     	; 0x3d8 <__mulsf3+0x8>

000003fc <__mulsf3_pse>:
 3fc:	95 9f       	mul	r25, r21
 3fe:	c1 f3       	breq	.-16     	; 0x3f0 <__mulsf3+0x20>
 400:	95 0f       	add	r25, r21
 402:	50 e0       	ldi	r21, 0x00	; 0
 404:	55 1f       	adc	r21, r21
 406:	62 9f       	mul	r22, r18
 408:	f0 01       	movw	r30, r0
 40a:	72 9f       	mul	r23, r18
 40c:	bb 27       	eor	r27, r27
 40e:	f0 0d       	add	r31, r0
 410:	b1 1d       	adc	r27, r1
 412:	63 9f       	mul	r22, r19
 414:	aa 27       	eor	r26, r26
 416:	f0 0d       	add	r31, r0
 418:	b1 1d       	adc	r27, r1
 41a:	aa 1f       	adc	r26, r26
 41c:	64 9f       	mul	r22, r20
 41e:	66 27       	eor	r22, r22
 420:	b0 0d       	add	r27, r0
 422:	a1 1d       	adc	r26, r1
 424:	66 1f       	adc	r22, r22
 426:	82 9f       	mul	r24, r18
 428:	22 27       	eor	r18, r18
 42a:	b0 0d       	add	r27, r0
 42c:	a1 1d       	adc	r26, r1
 42e:	62 1f       	adc	r22, r18
 430:	73 9f       	mul	r23, r19
 432:	b0 0d       	add	r27, r0
 434:	a1 1d       	adc	r26, r1
 436:	62 1f       	adc	r22, r18
 438:	83 9f       	mul	r24, r19
 43a:	a0 0d       	add	r26, r0
 43c:	61 1d       	adc	r22, r1
 43e:	22 1f       	adc	r18, r18
 440:	74 9f       	mul	r23, r20
 442:	33 27       	eor	r19, r19
 444:	a0 0d       	add	r26, r0
 446:	61 1d       	adc	r22, r1
 448:	23 1f       	adc	r18, r19
 44a:	84 9f       	mul	r24, r20
 44c:	60 0d       	add	r22, r0
 44e:	21 1d       	adc	r18, r1
 450:	82 2f       	mov	r24, r18
 452:	76 2f       	mov	r23, r22
 454:	6a 2f       	mov	r22, r26
 456:	11 24       	eor	r1, r1
 458:	9f 57       	subi	r25, 0x7F	; 127
 45a:	50 40       	sbci	r21, 0x00	; 0
 45c:	9a f0       	brmi	.+38     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 45e:	f1 f0       	breq	.+60     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 460:	88 23       	and	r24, r24
 462:	4a f0       	brmi	.+18     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 464:	ee 0f       	add	r30, r30
 466:	ff 1f       	adc	r31, r31
 468:	bb 1f       	adc	r27, r27
 46a:	66 1f       	adc	r22, r22
 46c:	77 1f       	adc	r23, r23
 46e:	88 1f       	adc	r24, r24
 470:	91 50       	subi	r25, 0x01	; 1
 472:	50 40       	sbci	r21, 0x00	; 0
 474:	a9 f7       	brne	.-22     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 476:	9e 3f       	cpi	r25, 0xFE	; 254
 478:	51 05       	cpc	r21, r1
 47a:	80 f0       	brcs	.+32     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 47c:	0c 94 97 01 	jmp	0x32e	; 0x32e <__fp_inf>
 480:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__fp_szero>
 484:	5f 3f       	cpi	r21, 0xFF	; 255
 486:	e4 f3       	brlt	.-8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 488:	98 3e       	cpi	r25, 0xE8	; 232
 48a:	d4 f3       	brlt	.-12     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 48c:	86 95       	lsr	r24
 48e:	77 95       	ror	r23
 490:	67 95       	ror	r22
 492:	b7 95       	ror	r27
 494:	f7 95       	ror	r31
 496:	e7 95       	ror	r30
 498:	9f 5f       	subi	r25, 0xFF	; 255
 49a:	c1 f7       	brne	.-16     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 49c:	fe 2b       	or	r31, r30
 49e:	88 0f       	add	r24, r24
 4a0:	91 1d       	adc	r25, r1
 4a2:	96 95       	lsr	r25
 4a4:	87 95       	ror	r24
 4a6:	97 f9       	bld	r25, 7
 4a8:	08 95       	ret

000004aa <_exit>:
 4aa:	f8 94       	cli

000004ac <__stop_program>:
 4ac:	ff cf       	rjmp	.-2      	; 0x4ac <__stop_program>
