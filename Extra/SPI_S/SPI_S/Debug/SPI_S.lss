
SPI_S.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000134  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000714  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000684  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000028b  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001200  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000380  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000015d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  88:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <SPI_tx>:
}

void SPI_tx(uint8_t data)
{
	/* Cargar dato al registro */
	SPDR = data;
  90:	8e bd       	out	0x2e, r24	; 46
	/* Esperar a que la transmisión se realice */
	while(!(SPSR & (1<<SPIF)));
  92:	0d b4       	in	r0, 0x2d	; 45
  94:	07 fe       	sbrs	r0, 7
  96:	fd cf       	rjmp	.-6      	; 0x92 <SPI_tx+0x2>
}
  98:	08 95       	ret

0000009a <SPI_rx>:

uint8_t SPI_rx()
{
	/* Esperar a la recepción del dato */
	while(!(SPSR & (1<<SPIF)));
  9a:	0d b4       	in	r0, 0x2d	; 45
  9c:	07 fe       	sbrs	r0, 7
  9e:	fd cf       	rjmp	.-6      	; 0x9a <SPI_rx>
	/* Retorna el dato recibido */
	return SPDR;
  a0:	8e b5       	in	r24, 0x2e	; 46
}
  a2:	08 95       	ret

000000a4 <main>:
int main(void)
{
    /* Replace with your application code */
    while (1) 
    {
		if(PORTB & (1<<PORTB2))
  a4:	2a 9b       	sbis	0x05, 2	; 5
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <main>
		{
			datoRecibido = SPI_rx();
  a8:	0e 94 4d 00 	call	0x9a	; 0x9a <SPI_rx>
  ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if(datoRecibido == 0xBB)
  b0:	8b 3b       	cpi	r24, 0xBB	; 187
  b2:	c1 f7       	brne	.-16     	; 0xa4 <main>
			{
				SPI_tx(0xCC);
  b4:	8c ec       	ldi	r24, 0xCC	; 204
  b6:	0e 94 48 00 	call	0x90	; 0x90 <SPI_tx>
  ba:	f4 cf       	rjmp	.-24     	; 0xa4 <main>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
