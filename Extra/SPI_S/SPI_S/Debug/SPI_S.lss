
SPI_S.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000114  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000188  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000804  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006de  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000313  00000000  00000000  00001112  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001428  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003dc  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  88:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <SPI_init>:

void SPI_tx(uint8_t data)
{
	SPDR = data;
	while(!(SPSR & (1<<SPIF)));
}
  90:	84 b1       	in	r24, 0x04	; 4
  92:	8b 7f       	andi	r24, 0xFB	; 251
  94:	84 b9       	out	0x04, r24	; 4
  96:	84 b1       	in	r24, 0x04	; 4
  98:	80 61       	ori	r24, 0x10	; 16
  9a:	84 b9       	out	0x04, r24	; 4
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	84 60       	ori	r24, 0x04	; 4
  a0:	85 b9       	out	0x05, r24	; 5
  a2:	8c b5       	in	r24, 0x2c	; 44
  a4:	8f 7d       	andi	r24, 0xDF	; 223
  a6:	8c bd       	out	0x2c, r24	; 44
  a8:	8c b5       	in	r24, 0x2c	; 44
  aa:	8f 7e       	andi	r24, 0xEF	; 239
  ac:	8c bd       	out	0x2c, r24	; 44
  ae:	8c b5       	in	r24, 0x2c	; 44
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	8c bd       	out	0x2c, r24	; 44
  b4:	08 95       	ret

000000b6 <SPI_rx>:

uint8_t SPI_rx()
{
	while(!(SPSR & (1<<SPIF)));
  b6:	0d b4       	in	r0, 0x2d	; 45
  b8:	07 fe       	sbrs	r0, 7
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <SPI_rx>
	return SPDR;
  bc:	8e b5       	in	r24, 0x2e	; 46
}
  be:	08 95       	ret

000000c0 <main>:
	//}
//}

int main(void)
{
	cli();
  c0:	f8 94       	cli
	SPI_init();
  c2:	0e 94 48 00 	call	0x90	; 0x90 <SPI_init>
	sei();
  c6:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	8f e3       	ldi	r24, 0x3F	; 63
  ca:	9c e9       	ldi	r25, 0x9C	; 156
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0xc>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x12>
  d2:	00 00       	nop
	
	_delay_ms(10);
	
    while (1) 
    {
		SPI_Rx = SPI_rx();
  d4:	0e 94 5b 00 	call	0xb6	; 0xb6 <SPI_rx>
  d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		if (SPI_Rx == 0x01)
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	19 f4       	brne	.+6      	; 0xe6 <main+0x26>
		{
		SPDR = 0x41;
  e0:	81 e4       	ldi	r24, 0x41	; 65
  e2:	8e bd       	out	0x2e, r24	; 46
  e4:	0e c0       	rjmp	.+28     	; 0x102 <main+0x42>
		}
		else if(SPI_Rx == 0x02)
  e6:	82 30       	cpi	r24, 0x02	; 2
  e8:	19 f4       	brne	.+6      	; 0xf0 <main+0x30>
		{
		SPDR = 0x42;
  ea:	82 e4       	ldi	r24, 0x42	; 66
  ec:	8e bd       	out	0x2e, r24	; 46
  ee:	09 c0       	rjmp	.+18     	; 0x102 <main+0x42>
		}
		else if(SPI_Rx == 0x03)
  f0:	83 30       	cpi	r24, 0x03	; 3
  f2:	19 f4       	brne	.+6      	; 0xfa <main+0x3a>
		{
		SPDR = 0x43;
  f4:	83 e4       	ldi	r24, 0x43	; 67
  f6:	8e bd       	out	0x2e, r24	; 46
  f8:	04 c0       	rjmp	.+8      	; 0x102 <main+0x42>
		}
		else if(SPI_Rx == 0x04)
  fa:	84 30       	cpi	r24, 0x04	; 4
  fc:	11 f4       	brne	.+4      	; 0x102 <main+0x42>
		{
		SPDR = 0x44;
  fe:	84 e4       	ldi	r24, 0x44	; 68
 100:	8e bd       	out	0x2e, r24	; 46
 102:	8f e3       	ldi	r24, 0x3F	; 63
 104:	9c e9       	ldi	r25, 0x9C	; 156
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x46>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x4c>
 10c:	00 00       	nop
 10e:	e2 cf       	rjmp	.-60     	; 0xd4 <main+0x14>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
