
usart_avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  00000182  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081b  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bf  00000000  00000000  00000b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031a  00000000  00000000  00001222  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  0000153c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000392  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cb  00000000  00000000  0000193e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001a09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 3a       	cpi	r26, 0xA2	; 162
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  8e:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <UART_init>:
void UART_write(unsigned char);				//función para la transmisión de caracteres
void UART_msg(char*);						//función para la transmisión de cadenas de caracteres

void UART_init()
{
	DDRD |= (1<<1);							//PD1	COMO SALIDA TXa
  96:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~(1<<0);						//PD0	COMO ENTRADA RX
  98:	50 98       	cbi	0x0a, 0	; 10
	UCSR0A = (0<<TXC0)|(0<<U2X0)|(0<<MPCM0);
  9a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = (1<<RXCIE0)|(0<<TXCIE0)|(0<<UDRIE0)|(1<<RXEN0)|(1<<TXEN0)|(0<<UCSZ02)|(0<<TXB80);
  9e:	88 e9       	ldi	r24, 0x98	; 152
  a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00)|(0<<UCPOL0);
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = 103;								//NO DUPLICA VELOCIDAD 9600B A 160000
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  b6:	08 95       	ret

000000b8 <UART_read>:
}

unsigned char UART_read(){
	if(UCSR0A&(1<<7)){			//si el bit7 del registro UCSR0A se ha puesto a 1
  b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  bc:	88 23       	and	r24, r24
  be:	1c f4       	brge	.+6      	; 0xc6 <UART_read+0xe>
		return UDR0;			//devuelve el dato almacenado en el registro UDR0
  c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  c4:	08 95       	ret
	}
	else
	return 0;
  c6:	80 e0       	ldi	r24, 0x00	; 0
}
  c8:	08 95       	ret

000000ca <UART_write>:

void UART_write(unsigned char caracter){
	while(!(UCSR0A&(1<<5)));    // mientras el registro UDR0 esté lleno espera
  ca:	e0 ec       	ldi	r30, 0xC0	; 192
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	90 81       	ld	r25, Z
  d0:	95 ff       	sbrs	r25, 5
  d2:	fd cf       	rjmp	.-6      	; 0xce <UART_write+0x4>
	UDR0 = caracter;            //cuando el el registro UDR0 está vacio se envia el caracter
  d4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  d8:	08 95       	ret

000000da <UART_write_txt>:
}

void UART_write_txt(char* cadena){			//cadena de caracteres de tipo char
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	ec 01       	movw	r28, r24
	while(*cadena !=0x00){				//mientras el último valor de la cadena sea diferente a el caracter nulo
  e0:	88 81       	ld	r24, Y
  e2:	88 23       	and	r24, r24
  e4:	31 f0       	breq	.+12     	; 0xf2 <UART_write_txt+0x18>
  e6:	21 96       	adiw	r28, 0x01	; 1
		UART_write(*cadena);			//transmite los caracteres de cadena
  e8:	0e 94 65 00 	call	0xca	; 0xca <UART_write>
	while(!(UCSR0A&(1<<5)));    // mientras el registro UDR0 esté lleno espera
	UDR0 = caracter;            //cuando el el registro UDR0 está vacio se envia el caracter
}

void UART_write_txt(char* cadena){			//cadena de caracteres de tipo char
	while(*cadena !=0x00){				//mientras el último valor de la cadena sea diferente a el caracter nulo
  ec:	89 91       	ld	r24, Y+
  ee:	81 11       	cpse	r24, r1
  f0:	fb cf       	rjmp	.-10     	; 0xe8 <UART_write_txt+0xe>
		UART_write(*cadena);			//transmite los caracteres de cadena
		cadena++;						//incrementa la ubicación de los caracteres en cadena
										//para enviar el siguiente caracter de cadena
	}
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <main>:


int main(void)
{
	
	DDRD |= (1<<4)|(1<<3)|(1<<2); //BIT 2 3 4 OUTPUT
  f8:	8a b1       	in	r24, 0x0a	; 10
  fa:	8c 61       	ori	r24, 0x1C	; 28
  fc:	8a b9       	out	0x0a, r24	; 10
	
	UART_init();
  fe:	0e 94 4b 00 	call	0x96	; 0x96 <UART_init>
	
	UART_write_txt("digite 1 3 5 para encender leds\n\r");
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	0e 94 6d 00 	call	0xda	; 0xda <UART_write_txt>
	UART_write_txt("digite 2 4 6 para apagar leds\n\r");
 10a:	82 e2       	ldi	r24, 0x22	; 34
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 6d 00 	call	0xda	; 0xda <UART_write_txt>
	uint8_t dato=0;
    /* Replace with your application code */
    while (1) 
    {
		dato = UART_read();
 112:	0e 94 5c 00 	call	0xb8	; 0xb8 <UART_read>
		
		if(dato != 0)
 116:	88 23       	and	r24, r24
 118:	e1 f3       	breq	.-8      	; 0x112 <main+0x1a>
		{
			switch(dato)
 11a:	83 33       	cpi	r24, 0x33	; 51
 11c:	c1 f0       	breq	.+48     	; 0x14e <main+0x56>
 11e:	28 f4       	brcc	.+10     	; 0x12a <main+0x32>
 120:	81 33       	cpi	r24, 0x31	; 49
 122:	49 f0       	breq	.+18     	; 0x136 <main+0x3e>
 124:	82 33       	cpi	r24, 0x32	; 50
 126:	69 f0       	breq	.+26     	; 0x142 <main+0x4a>
 128:	f4 cf       	rjmp	.-24     	; 0x112 <main+0x1a>
 12a:	85 33       	cpi	r24, 0x35	; 53
 12c:	e1 f0       	breq	.+56     	; 0x166 <main+0x6e>
 12e:	a8 f0       	brcs	.+42     	; 0x15a <main+0x62>
 130:	86 33       	cpi	r24, 0x36	; 54
 132:	f9 f0       	breq	.+62     	; 0x172 <main+0x7a>
 134:	ee cf       	rjmp	.-36     	; 0x112 <main+0x1a>
			{
				case '1':
					UART_write_txt("LED1 encendido\n\r");
 136:	82 e4       	ldi	r24, 0x42	; 66
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 6d 00 	call	0xda	; 0xda <UART_write_txt>
					PORTD|= (1<<2);
 13e:	5a 9a       	sbi	0x0b, 2	; 11
				break;
 140:	e8 cf       	rjmp	.-48     	; 0x112 <main+0x1a>
				
				case '2':
					UART_write_txt("LED1 apagado\n\r");
 142:	83 e5       	ldi	r24, 0x53	; 83
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 6d 00 	call	0xda	; 0xda <UART_write_txt>
					PORTD &= ~(1<<2);
 14a:	5a 98       	cbi	0x0b, 2	; 11
				break;
 14c:	e2 cf       	rjmp	.-60     	; 0x112 <main+0x1a>
				
				case '3':
				UART_write_txt("LED2 encendido\n\r");
 14e:	82 e6       	ldi	r24, 0x62	; 98
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	0e 94 6d 00 	call	0xda	; 0xda <UART_write_txt>
				PORTD|= (1<<3);
 156:	5b 9a       	sbi	0x0b, 3	; 11
				break;
 158:	dc cf       	rjmp	.-72     	; 0x112 <main+0x1a>
				
				case '4':
				UART_write_txt("LED2 apagado\n\r");
 15a:	83 e7       	ldi	r24, 0x73	; 115
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	0e 94 6d 00 	call	0xda	; 0xda <UART_write_txt>
				PORTD &= ~(1<<3);
 162:	5b 98       	cbi	0x0b, 3	; 11
				break;
 164:	d6 cf       	rjmp	.-84     	; 0x112 <main+0x1a>
				
				case '5':
				UART_write_txt("LED3 encendido\n\r");
 166:	82 e8       	ldi	r24, 0x82	; 130
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 6d 00 	call	0xda	; 0xda <UART_write_txt>
				PORTD|= (1<<4);
 16e:	5c 9a       	sbi	0x0b, 4	; 11
				break;
 170:	d0 cf       	rjmp	.-96     	; 0x112 <main+0x1a>
				
				case '6':
				UART_write_txt("LED3 apagado\n\r");
 172:	83 e9       	ldi	r24, 0x93	; 147
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	0e 94 6d 00 	call	0xda	; 0xda <UART_write_txt>
				PORTD &= ~(1<<4);
 17a:	5c 98       	cbi	0x0b, 4	; 11
				break;
 17c:	ca cf       	rjmp	.-108    	; 0x112 <main+0x1a>

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
